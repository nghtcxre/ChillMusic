const { app, BrowserWindow, ipcMain, session } = require('electron');
const path = require('path');
const mysql = require('mysql2/promise');
const crypto = require('crypto');
const fs = require('fs');
const os = require('os');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π email —Å–µ—Ä–≤–∏—Å
const emailService = require('./email-service');


const getAverageColor = require('fast-average-color').getAverageColor;

const axios = require('axios');
const cheerio = require('cheerio');


const SESSION_FILE = path.join(os.homedir(), '.chillmusic_session');

function saveSession(token) {
  fs.writeFileSync(SESSION_FILE, token, 'utf8');
}

function loadSession() {
  try {
    return fs.readFileSync(SESSION_FILE, 'utf8');
  } catch (e) {
    return null;
  }
}


function clearSession() {
  try {
    fs.unlinkSync(SESSION_FILE);
  } catch (e) {
    console.error('Error clearing session:', e);
  }
}


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è email —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function initializeEmailService() {
  try {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è email —Å–µ—Ä–≤–∏—Å–∞...');
    const result = await emailService.testSMTPConnection();
    
    if (result.success) {
      console.log('‚úÖ Email —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
      const config = emailService.getConfigInfo();
      console.log(`üìß –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${config.provider}, Host: ${config.host}`);
    } else {
      console.log('‚ö†Ô∏è Email —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', result.error);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ email —Å–µ—Ä–≤–∏—Å–∞:', error.message);
  }
}



// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
const dbConfig = {
  host: 'server82.hosting.reg.ru',
  user: 'u2819853_default',
  password: 'SbMwsewMI531Xm6G',
  database: 'u2819853_default',
  waitForConnections: true,
  connectionLimit: 5,
  acquireTimeout: 60000,
  timeout: 60000,
  reconnect: true,
  idleTimeout: 300000,
  queueLimit: 0
};

const pool = mysql.createPool(dbConfig);

// –ö—ç—à –¥–ª—è —Ä–µ–ª–∏–∑–æ–≤
let releasesCache = null;
let cacheTimestamp = null;
const CACHE_DURATION = 30 * 1000; // 30 —Å–µ–∫—É–Ω–¥

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ —Ä–µ–ª–∏–∑–æ–≤
function clearReleasesCache() {
  releasesCache = null;
  cacheTimestamp = null;
  console.log('–ö—ç—à —Ä–µ–ª–∏–∑–æ–≤ –æ—á–∏—â–µ–Ω');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–∞
function getCacheStatus() {
  const now = Date.now();
  const isCacheValid = releasesCache && cacheTimestamp && (now - cacheTimestamp) < CACHE_DURATION;
  const timeLeft = cacheTimestamp ? Math.max(0, CACHE_DURATION - (now - cacheTimestamp)) : 0;
  
  return {
    hasCache: !!releasesCache,
    isCacheValid,
    timeLeft: Math.round(timeLeft / 1000),
    cacheSize: releasesCache ? releasesCache.length : 0
  };
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–ª–∏–∑–æ–≤
ipcMain.handle('get-releases-fast', async () => {
  console.log('=== –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ë–´–°–¢–†–ê–Ø –ó–ê–ì–†–£–ó–ö–ê ===');
  let connection;
  try {
    connection = await pool.getConnection();
    
    // –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ JOIN'–æ–≤
    const [rows] = await connection.query(`
        SELECT 
          id,
          title,
          type,
          host_rating,
          average_user_rating,
          add_date,
          image
        FROM Releases
        ORDER BY add_date DESC
        LIMIT 50
    `);
    
    const result = rows.map(row => ({
      id: row.id,
      title: row.title,
      type: row.type,
      host_rating: row.host_rating,
      average_user_rating: row.average_user_rating,
      add_date: row.add_date,
      image: row.image ? row.image : null,
      artist_names: '–ó–∞–≥—Ä—É–∑–∫–∞...',
      artist_ids: [],
      artist_name: '–ó–∞–≥—Ä—É–∑–∫–∞...',
      artist_id: null
    }));
    
    console.log(`–ë—ã—Å—Ç—Ä–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${result.length} —Ä–µ–ª–∏–∑–æ–≤`);
    return result;
    
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:', err.message);
    throw new Error(`–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${err.message}`);
  } finally {
    if (connection) {
      connection.release();
    }
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—É–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
pool.on('connection', function (connection) {
  console.log('–ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å –ë–î');
});

pool.on('acquire', function (connection) {
  console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –ø—É–ª–∞');
});

pool.on('release', function (connection) {
  console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –ø—É–ª');
});

pool.on('error', function(err) {
  console.error('–û—à–∏–±–∫–∞ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', err);
});

ipcMain.handle('get-all-releases', async () => {
  let connection;
  try {
    connection = await pool.getConnection();

    const [rows] = await connection.query(`
      SELECT 
        r.id,
        r.title,
        r.type,
        r.host_rating,
        r.average_user_rating,
        r.add_date,
        r.image,
        ar.artist_names,
        ar.artist_ids
      FROM Releases r
      LEFT JOIN (
        SELECT 
          ra.release_id,
          GROUP_CONCAT(a.name ORDER BY a.name SEPARATOR ', ') AS artist_names,
          GROUP_CONCAT(a.id ORDER BY a.id SEPARATOR ',') AS artist_ids
        FROM ReleaseArtists ra
        JOIN Artists a ON a.id = ra.artist_id
        GROUP BY ra.release_id
      ) ar ON ar.release_id = r.id
      ORDER BY r.add_date DESC
    `);

    return rows.map(row => {
      const artistIds = row.artist_ids ? String(row.artist_ids).split(',').map(v => v.trim()).filter(Boolean) : [];
      return {
        id: row.id,
        title: row.title,
        type: row.type,
        host_rating: row.host_rating,
        average_user_rating: row.average_user_rating,
        add_date: row.add_date,
        image: row.image ? row.image : null,
        artist_names: row.artist_names || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
        artist_ids: artistIds,
        // —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ä–µ–Ω–¥–µ—Ä–æ–º
        artist_name: row.artist_names || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
        artist_id: artistIds.length ? artistIds[0] : null
      };
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–ª–∏–∑–æ–≤:', {
      message: err.message,
      code: err.code,
      errno: err.errno,
      sqlState: err.sqlState,
      sqlMessage: err.sqlMessage,
      stack: err.stack
    });
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–ª–∏–∑—ã');
  } finally {
    if (connection) connection.release();
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
async function testDatabase() {
  let conn;
  try {
    console.log('=== –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–• ===');
    console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î:', {
      host: dbConfig.host,
      user: dbConfig.user,
      database: dbConfig.database,
      connectionLimit: dbConfig.connectionLimit
    });
    
    conn = await pool.getConnection();
    console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    const [rows] = await conn.query('SELECT NOW()');
    console.log('Database connection OK. Current time:', rows[0]['NOW()']);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é MySQL
    const [versionRows] = await conn.query('SELECT VERSION() as version');
    console.log('MySQL version:', versionRows[0].version);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    const [tables] = await conn.query("SHOW TABLES");
    const tableNames = tables.map(t => Object.values(t)[0]);
    console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', tableNames);
    
    const requiredTables = ['Releases', 'ReleaseArtists', 'Artists', 'Users'];
    const missingTables = requiredTables.filter(table => !tableNames.includes(table));
    
    if (missingTables.length > 0) {
      console.warn('‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã:', missingTables);
    } else {
      console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    console.log('=== –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù ===');
  } catch (err) {
    console.error('=== –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î ===');
    console.error('–¢–∏–ø –æ—à–∏–±–∫–∏:', err.constructor.name);
    console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', err.message);
    console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', err.code);
    console.error('SQL State:', err.sqlState);
    console.error('Stack trace:', err.stack);
    throw err;
  } finally {
    if (conn) conn.release();
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü
async function initializeTables() {
  let connection;
  try {
    connection = await pool.getConnection();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É average_user_rating –≤ —Ç–∞–±–ª–∏—Ü—É Releases, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    try {
      await connection.query('SELECT average_user_rating FROM Releases LIMIT 1');
    } catch (err) {
      if (err.code === 'ER_BAD_FIELD_ERROR') {
        console.log('–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É average_user_rating –≤ —Ç–∞–±–ª–∏—Ü—É Releases...');
        await connection.query('ALTER TABLE Releases ADD COLUMN average_user_rating DECIMAL(3,1) DEFAULT NULL');
        console.log('–ö–æ–ª–æ–Ω–∫–∞ average_user_rating –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É UserReleaseRatings, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const [userRatingsTables] = await connection.query("SHOW TABLES LIKE 'UserReleaseRatings'");
    if (userRatingsTables.length === 0) {
      console.log('–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É UserReleaseRatings...');
      await connection.query(`
        CREATE TABLE UserReleaseRatings (
          id INT AUTO_INCREMENT PRIMARY KEY,
          user_id INT NOT NULL,
          release_id INT NOT NULL,
          textValue DECIMAL(3,1) DEFAULT 5.0,
          structureValue DECIMAL(3,1) DEFAULT 5.0,
          soundValue DECIMAL(3,1) DEFAULT 5.0,
          voiceValue DECIMAL(3,1) DEFAULT 5.0,
          individualityValue DECIMAL(3,1) DEFAULT 5.0,
          atmosphereValue DECIMAL(3,1) DEFAULT 5.0,
          score DECIMAL(3,1) NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
          UNIQUE KEY unique_user_release (user_id, release_id),
          FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE,
          FOREIGN KEY (release_id) REFERENCES Releases(id) ON DELETE CASCADE
        )
      `);
      console.log('–¢–∞–±–ª–∏—Ü–∞ UserReleaseRatings —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É UserFavorites, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const [userFavoritesTables] = await connection.query("SHOW TABLES LIKE 'UserFavorites'");
    if (userFavoritesTables.length === 0) {
      console.log('–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É UserFavorites...');
      await connection.query(`
        CREATE TABLE UserFavorites (
          id INT AUTO_INCREMENT PRIMARY KEY,
          user_id INT NOT NULL,
          release_id INT NOT NULL,
          added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          is_pinned BOOLEAN DEFAULT FALSE,
          UNIQUE KEY unique_user_release_fav (user_id, release_id),
          FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE,
          FOREIGN KEY (release_id) REFERENCES Releases(id) ON DELETE CASCADE
        )
      `);
      console.log('–¢–∞–±–ª–∏—Ü–∞ UserFavorites —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É UserArtistFavorites, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const [userArtistFavoritesTables] = await connection.query("SHOW TABLES LIKE 'UserArtistFavorites'");
    if (userArtistFavoritesTables.length === 0) {
      console.log('–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É UserArtistFavorites...');
      await connection.query(`
        CREATE TABLE UserArtistFavorites (
          id INT AUTO_INCREMENT PRIMARY KEY,
          user_id INT NOT NULL,
          artist_id INT NOT NULL,
          added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          is_pinned BOOLEAN DEFAULT FALSE,
          avatar_cache LONGBLOB,
          UNIQUE KEY unique_user_artist_fav (user_id, artist_id),
          FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE,
          FOREIGN KEY (artist_id) REFERENCES Artists(id) ON DELETE CASCADE
        )
      `);
      console.log('–¢–∞–±–ª–∏—Ü–∞ UserArtistFavorites —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É PostLikes, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const [postLikesTables] = await connection.query("SHOW TABLES LIKE 'post_likes'");
    if (postLikesTables.length === 0) {
      console.log('–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É post_likes...');
      await connection.query(`
        CREATE TABLE post_likes (
          id INT AUTO_INCREMENT PRIMARY KEY,
          user_id INT NOT NULL,
          post_id INT NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          UNIQUE KEY unique_user_post_like (user_id, post_id),
          FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE,
          FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE
        )
      `);
      console.log('–¢–∞–±–ª–∏—Ü–∞ post_likes —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É Posts, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const [postsTables] = await connection.query("SHOW TABLES LIKE 'posts'");
    if (postsTables.length === 0) {
      console.log('–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É posts...');
      await connection.query(`
        CREATE TABLE posts (
          id INT AUTO_INCREMENT PRIMARY KEY,
          author_id INT NOT NULL,
          text TEXT NOT NULL,
          image_url VARCHAR(500) NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
          FOREIGN KEY (author_id) REFERENCES Users(id) ON DELETE CASCADE
        )
      `);
      console.log('–¢–∞–±–ª–∏—Ü–∞ posts —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ is_admin –≤ —Ç–∞–±–ª–∏—Ü—É Users, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    try {
      await connection.query('SELECT is_admin FROM Users LIMIT 1');
    } catch (err) {
      if (err.code === 'ER_BAD_FIELD_ERROR') {
        console.log('–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ is_admin –≤ —Ç–∞–±–ª–∏—Ü—É Users...');
        await connection.query('ALTER TABLE Users ADD COLUMN is_admin BOOLEAN DEFAULT FALSE');
        console.log('–ü–æ–ª–µ is_admin –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É UserLoginHistory, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const [loginHistoryTables] = await connection.query("SHOW TABLES LIKE 'UserLoginHistory'");
    if (loginHistoryTables.length === 0) {
      console.log('–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É UserLoginHistory...');
      await connection.query(`
        CREATE TABLE UserLoginHistory (
          id INT AUTO_INCREMENT PRIMARY KEY,
          user_id INT NOT NULL,
          ip_address VARCHAR(64) NULL,
          os_info VARCHAR(255) NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE
        )
      `);
      console.log('–¢–∞–±–ª–∏—Ü–∞ UserLoginHistory —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è 2FA –≤ —Ç–∞–±–ª–∏—Ü—É Users, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    try {
      await connection.query('SELECT twofa_secret, is_twofa_enabled FROM Users LIMIT 1');
    } catch (err) {
      if (err.code === 'ER_BAD_FIELD_ERROR') {
        console.log('–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è twofa_secret –∏ is_twofa_enabled –≤ —Ç–∞–±–ª–∏—Ü—É Users...');
        try { await connection.query('ALTER TABLE Users ADD COLUMN twofa_secret VARBINARY(128) NULL'); } catch (e) {}
        try { await connection.query('ALTER TABLE Users ADD COLUMN is_twofa_enabled BOOLEAN DEFAULT FALSE'); } catch (e) {}
        console.log('–ü–æ–ª—è –¥–ª—è 2FA –¥–æ–±–∞–≤–ª–µ–Ω—ã (–∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)');
      }
    }

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
}

let mainWindow;

function createWindow() {
  
  const iconPath = path.join(__dirname, 'images', 'favicon.ico');
  mainWindow = new BrowserWindow({
    width: 1580,
    height: 980,
    icon: iconPath,
    //titleBarStyle: 'hidden',
    //frame: false,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
      contextIsolation: true,
      nodeIntegration: false
    }
  });

  // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞
  clearReleasesCache();
  console.log('–ö—ç—à –æ—á–∏—â–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞');

  require('electron').Menu.setApplicationMenu(null)
  mainWindow.loadFile('home.html');
  mainWindow.webContents.openDevTools();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º email —Å–µ—Ä–≤–∏—Å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞
  initializeEmailService();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ IPC
ipcMain.handle('send-confirmation-code', async (event, email) => {
  try {
    console.log(`üîê –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è: ${email}`);
    
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email:', email);
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π email —Å–µ—Ä–≤–∏—Å
    const result = await emailService.sendConfirmationEmail(email, 'ChillMusic');
    console.log(`‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`);
    return { success: true, messageId: result.messageId };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞:', error);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      email: email,
      message: error.message,
      stack: error.stack
    });
    throw error;
  }
});

ipcMain.handle('verify-confirmation-code', async (event, { email, code }) => {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π email —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
    emailService.verifyConfirmationCode(email, code);
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞:', error);
    throw error;
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–∞–∑–¥–µ–ª —Å –¥—Ä—É–≥–∏–º–∏ ipcMain.handle
ipcMain.handle('save-token', (event, token) => {
  try {
    const SESSION_FILE = path.join(os.homedir(), '.chillmusic_session');
    fs.writeFileSync(SESSION_FILE, token, 'utf8');
    return { success: true };
  } catch (err) {
    console.error('Error saving token:', err);
    return { success: false };
  }
});


ipcMain.handle('register-user', async (event, userData) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [existingUsers] = await connection.query(
      'SELECT id FROM Users WHERE email = ?',
      [userData.email]
    );
    
    if (existingUsers.length > 0) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å —Å–æ–ª—å—é
    const salt = crypto.randomBytes(16).toString('hex');
    const hashedPassword = crypto
      .pbkdf2Sync(userData.password, salt, 1000, 64, 'sha512')
      .toString('hex');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [result] = await connection.query(
      `INSERT INTO Users 
       (email, display_name, password_hash, salt, is_verified) 
       VALUES (?, ?, ?, ?, ?)`,
      [userData.email, userData.displayName, hashedPassword, salt, true]
    );
    
    return { success: true, userId: result.insertId };
  } catch (err) {
    console.error('Registration error:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–µ—Ç –ø–æ –¥–∞—Ç–∞–º —Ä–µ–ª–∏–∑–æ–≤
ipcMain.handle('get-release-years', async () => {
  let connection;
  try {
    connection = await pool.getConnection();
    const [rows] = await connection.query(`
      SELECT DISTINCT YEAR(add_date) AS yr
      FROM Releases
      WHERE add_date IS NOT NULL
      ORDER BY yr DESC
    `);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä [2025, 2024, 2021]
    return rows.map(r => r.yr);
  } catch (err) {
    console.error('Error fetching release years:', err);
    return [];
  } finally {
    if (connection) connection.release();
  }
});

app.on('window-all-closed', () => {
  pool.end();
  app.quit();
});

// IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
ipcMain.handle('get-releases', async () => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    const [rows] = await connection.query(`
        SELECT 
          r.id,
          r.title,
          r.type,
          r.host_rating,
          r.average_user_rating,
          r.add_date,
          r.image,
          ar.artist_names,
          ar.artist_ids
        FROM Releases r
        LEFT JOIN (
          SELECT 
            ra.release_id,
            GROUP_CONCAT(a.name ORDER BY a.name SEPARATOR ', ') AS artist_names,
            GROUP_CONCAT(a.id ORDER BY a.id SEPARATOR ',') AS artist_ids
          FROM ReleaseArtists ra
          JOIN Artists a ON a.id = ra.artist_id
          GROUP BY ra.release_id
        ) ar ON ar.release_id = r.id
        ORDER BY r.add_date DESC
        LIMIT 10
    `);
    
    return rows.map(row => ({
      id: row.id,
      title: row.title,
      type: row.type,
      host_rating: row.host_rating,
      average_user_rating: row.average_user_rating,
      add_date: row.add_date,
      image: row.image ? row.image : null,
      artist_names: row.artist_names || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
      artist_ids: row.artist_ids ? row.artist_ids.split(',').map(id => id.trim()) : [],
      // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
      artist_name: row.artist_names || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
      artist_id: row.artist_ids ? row.artist_ids.split(',')[0].trim() : null
    }));
    
  } catch (err) {
    console.error('Database error:', err);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
  } finally {
    if (connection) connection.release();
  }
});

ipcMain.handle('get-paged-releases', async (_event, { page = 1, pageSize = 20, filters = {} }) => {
  let connection;
  try {
    connection = await pool.getConnection();

    const offset = (page - 1) * pageSize;

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const whereClauses = [];
    const params = [];
    if (filters.year) { whereClauses.push('YEAR(r.add_date) = ?'); params.push(filters.year); }
    if (typeof filters.month === 'number') { whereClauses.push('MONTH(r.add_date) = ?'); params.push(filters.month + 1); }
    if (filters.type) { whereClauses.push('r.type = ?'); params.push(filters.type); }
    // –î–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥–∞: –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
    const ratingCol = (filters.ratingSource === 'host') ? 'r.host_rating' : 'r.average_user_rating';
    if (typeof filters.ratingMin === 'number') { whereClauses.push(`${ratingCol} >= ?`); params.push(filters.ratingMin); }
    if (typeof filters.ratingMax === 'number') { whereClauses.push(`${ratingCol} <= ?`); params.push(filters.ratingMax); }
    const whereSql = whereClauses.length ? ('WHERE ' + whereClauses.join(' AND ')) : '';

    // –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    const [[{ total }]] = await connection.query(`SELECT COUNT(*) as total FROM Releases r ${whereSql}`, params);

    // –±–µ—Ä–µ–º —Ä–µ–ª–∏–∑—ã –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ
    const [rows] = await connection.query(`
      SELECT 
        r.id,
        r.title,
        r.type,
        r.host_rating,
        r.average_user_rating,
        r.add_date,
        r.image,
        GROUP_CONCAT(DISTINCT a.name ORDER BY a.name SEPARATOR ', ') AS artist_names,
        GROUP_CONCAT(DISTINCT a.id ORDER BY a.id SEPARATOR ',') AS artist_ids
      FROM Releases r
      LEFT JOIN ReleaseArtists ra ON r.id = ra.release_id
      LEFT JOIN Artists a ON ra.artist_id = a.id
      ${whereSql}
      GROUP BY r.id
      ORDER BY r.add_date DESC
      LIMIT ? OFFSET ?
    `, [...params, pageSize, offset]);

    return {
      releases: rows.map(row => ({
        id: row.id,
        title: row.title,
        type: row.type,
        host_rating: row.host_rating,
        average_user_rating: row.average_user_rating,
        add_date: row.add_date,
        image: row.image ? row.image : null,
        artist_names: row.artist_names || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
        artist_ids: row.artist_ids ? String(row.artist_ids).split(',').map(v => v.trim()).filter(Boolean) : [],
        // —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        artist_name: row.artist_names || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
        artist_id: row.artist_ids ? String(row.artist_ids).split(',')[0] : null
      })),
      total
    };

  } catch (err) {
    console.error('Database error:', err);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–ª–∏–∑—ã');
  } finally {
    if (connection) connection.release();
  }
});

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä (–±–∞–π—Ç—ã + mime)
ipcMain.handle('update-user-avatar', async (event, { bytes, mime }) => {
  const token = loadSession();
  if (!token) throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

  let connection;
  try {
    connection = await pool.getConnection();
    const buffer = bytes ? Buffer.from(bytes) : null; // bytes = Uint8Array / number[]
    await connection.query(
      'UPDATE Users SET avatar = ?, avatar_mime = ? WHERE auth_token = ?',
      [buffer, mime || 'application/octet-stream', token]
    );
    return { success: true };
  } catch (err) {
    console.error('Error updating avatar:', err);
    throw err;
  } finally { if (connection) connection.release(); }
});

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä (–±–∞–π—Ç—ã + mime)
ipcMain.handle('update-user-banner', async (event, { bytes, mime }) => {
  const token = loadSession();
  if (!token) throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

  let connection;
  try {
    connection = await pool.getConnection();
    const buffer = bytes ? Buffer.from(bytes) : null;
    await connection.query(
      'UPDATE Users SET banner = ?, banner_mime = ? WHERE auth_token = ?',
      [buffer, mime || 'application/octet-stream', token]
    );
    return { success: true };
  } catch (err) {
    console.error('Error updating banner:', err);
    throw err;
  } finally { if (connection) connection.release(); }
});

// –°–º–µ–Ω–∏—Ç—å –Ω–∏–∫
ipcMain.handle('update-user-name', async (event, { displayName }) => {
  const token = loadSession();
  if (!token) throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

  let connection;
  try {
    connection = await pool.getConnection();
    await connection.query(
      'UPDATE Users SET display_name = ? WHERE auth_token = ?',
      [displayName, token]
    );
    return { success: true };
  } catch (err) {
    console.error('Error updating display name:', err);
    throw err;
  } finally { if (connection) connection.release(); }
});



ipcMain.handle('get-rating-releases', async (_event, { month, year }) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    const [rows] = await connection.query(`
      SELECT 
        r.id,
        r.title,
        r.type,
        r.host_rating,
        r.average_user_rating,
        r.add_date,
        r.image,
        GROUP_CONCAT(a.name SEPARATOR ', ') AS artist_names,
        GROUP_CONCAT(a.id SEPARATOR ', ') AS artist_ids
      FROM Releases r
      LEFT JOIN ReleaseArtists ra ON r.id = ra.release_id
      LEFT JOIN Artists a ON ra.artist_id = a.id
      WHERE
        MONTH(r.add_date) = ?
        AND YEAR(r.add_date) = ?
      GROUP BY r.id
      ORDER BY r.add_date DESC
    `, [month + 1, year]);

    return rows.map(row => ({
      id: row.id,
      title: row.title,
      type: row.type,
      host_rating: row.host_rating,
      average_user_rating: row.average_user_rating,
      add_date: row.add_date,
      image: row.image ? row.image : null,
      artist_names: row.artist_names || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
      artist_ids: row.artist_ids ? row.artist_ids.split(',').map(id => id.trim()) : [],
      // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
      artist_name: row.artist_names || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
      artist_id: row.artist_ids ? row.artist_ids.split(',')[0].trim() : null
    }));
  } catch (err) {
    console.error('Database error:', err);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥');
  } finally {
    if (connection) connection.release();
  }
});


// –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–µ–ª–∏–∑–æ–≤, –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ipcMain.handle('unifiedSearch', async (event, searchQuery) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    // –ü–æ–∏—Å–∫ —Ä–µ–ª–∏–∑–æ–≤
    const [releaseRows] = await connection.query(`
      SELECT 
        r.id,
        r.title,
        r.type,
        r.host_rating,
        r.average_user_rating,
        r.add_date,
        r.image,
        GROUP_CONCAT(a.name SEPARATOR ', ') AS artist_names,
        MIN(a.id) AS artist_id,
        'release' as result_type
      FROM Releases r
      JOIN ReleaseArtists ra ON r.id = ra.release_id
      JOIN Artists a ON ra.artist_id = a.id
      WHERE r.title LIKE ? OR a.name LIKE ?
      GROUP BY r.id
      ORDER BY r.add_date DESC
      LIMIT 20
    `, [`%${searchQuery}%`, `%${searchQuery}%`]);
    
    // –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤ —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏ (–∏–∑ –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    const [artistRows] = await connection.query(`
      SELECT 
        a.id,
        a.name,
        'artist' as result_type,
        uaf.avatar_cache
      FROM Artists a
      LEFT JOIN UserArtistFavorites uaf ON a.id = uaf.artist_id
      WHERE a.name LIKE ?
      GROUP BY a.id
      ORDER BY a.name ASC
      LIMIT 10
    `, [`%${searchQuery}%`]);

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ display_name –∏ email)
    const [userRows] = await connection.query(`
      SELECT 
        id,
        display_name,
        email,
        avatar,
        'user' as result_type
      FROM Users
      WHERE display_name LIKE ? OR email LIKE ?
      ORDER BY display_name ASC
      LIMIT 10
    `, [`%${searchQuery}%`, `%${searchQuery}%`]);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const releases = releaseRows.map(row => ({
      id: row.id,
      title: row.title,
      type: row.type,
      host_rating: row.host_rating,
      average_user_rating: row.average_user_rating,
      add_date: row.add_date,
      image: row.image ? row.image : null,
      artist_name: row.artist_names,
      artist_id: row.artist_id,
      result_type: 'release'
    }));
    
    const artists = await Promise.all(artistRows.map(async (row) => {
      let avatar = null;
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
      if (row.avatar_cache) {
        avatar = new Uint8Array(row.avatar_cache);
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        let avatarUrl = null;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (artistImageCache.has(row.name)) {
          avatarUrl = artistImageCache.get(row.name);
        } else {
          // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
          avatarUrl = await findArtistImage(row.name);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (–¥–∞–∂–µ –µ—Å–ª–∏ null)
          artistImageCache.set(row.name, avatarUrl);
        }
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∞–≤–∞—Ç–∞—Ä, —Å–∫–∞—á–∏–≤–∞–µ–º –µ–≥–æ
        if (avatarUrl) {
          try {
            const response = await axios.get(avatarUrl, { 
              responseType: 'arraybuffer',
              timeout: 5000 // –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
            });
            avatar = new Uint8Array(response.data);
          } catch (downloadError) {
            console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:', downloadError);
          }
        }
      }
      
      return {
        id: row.id,
        name: row.name,
        result_type: 'artist',
        avatar: avatar
      };
    }));
    
    const users = userRows.map(row => ({
      id: row.id,
      displayName: row.display_name || row.email,
      email: row.email,
      result_type: 'user',
      avatar: row.avatar ? new Uint8Array(row.avatar) : null
    }));

    return {
      releases,
      artists,
      users,
      total: releases.length + artists.length + users.length
    };
    
  } catch (err) {
    console.error('Unified search error:', err);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫');
  } finally {
    if (connection) connection.release();
  }
});

// –ü–æ–∏—Å–∫ —Ä–µ–ª–∏–∑–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ü–µ–Ω–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ö–∞–Ω–∏–∫—É unifiedSearch)
ipcMain.handle('searchReleases', async (event, searchQuery) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    // –ü–æ–∏—Å–∫ —Ä–µ–ª–∏–∑–æ–≤ (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞, —á—Ç–æ –∏ –≤ unifiedSearch)
    const [releaseRows] = await connection.query(`
      SELECT 
        r.id,
        r.title,
        r.type,
        r.host_rating,
        r.average_user_rating,
        r.add_date,
        r.image,
        GROUP_CONCAT(a.name SEPARATOR ', ') AS artist_names,
        MIN(a.id) AS artist_id,
        'release' as result_type
      FROM Releases r
      JOIN ReleaseArtists ra ON r.id = ra.release_id
      JOIN Artists a ON ra.artist_id = a.id
      WHERE r.title LIKE ? OR a.name LIKE ?
      GROUP BY r.id
      ORDER BY r.add_date DESC
      LIMIT 20
    `, [`%${searchQuery}%`, `%${searchQuery}%`]);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞, —á—Ç–æ –∏ –≤ unifiedSearch)
    const releases = releaseRows.map(row => ({
      id: row.id,
      title: row.title,
      type: row.type,
      host_rating: row.host_rating,
      average_user_rating: row.average_user_rating,
      add_date: row.add_date,
      image: row.image ? row.image : null,
      artist_name: row.artist_names,
      artist_id: row.artist_id,
      result_type: 'release'
    }));
    
    return {
      releases,
      total: releases.length
    };
    
  } catch (err) {
    console.error('Search releases error:', err);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —Ä–µ–ª–∏–∑–æ–≤');
  } finally {
    if (connection) connection.release();
  }
});

ipcMain.handle('update-user-about', async (event, { about }) => {
  const token = loadSession();
  if (!token) throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

  let connection;
  try {
    connection = await pool.getConnection();
    await connection.query(
      'UPDATE Users SET about = ? WHERE auth_token = ?',
      [about, token]
    );
    return { success: true };
  } catch (err) {
    console.error('Error updating about:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
ipcMain.handle('check-auth', async () => {
  const token = loadSession();
  if (!token) return null;

  let connection;
  try {
    connection = await pool.getConnection();
    const [users] = await connection.query(
      'SELECT id, email, display_name, about, avatar, avatar_mime, banner, banner_mime, created_at, is_admin, is_twofa_enabled FROM Users WHERE auth_token = ?',
      [token]
    );
    connection.release();

    if (!users.length) { clearSession(); return null; }
    const u = users[0];

    console.log('check-auth: Found user:', {
      id: u.id,
      display_name: u.display_name,
      hasAvatar: !!u.avatar,
      hasBanner: !!u.banner,
      avatarSize: u.avatar ? u.avatar.length : 0,
      bannerSize: u.banner ? u.banner.length : 0
    });

    // Buffer -> Uint8Array (–ø–æ IPC —É–µ–¥–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
    const avatarBytes = u.avatar ? new Uint8Array(u.avatar) : null;
    const bannerBytes = u.banner ? new Uint8Array(u.banner) : null;

    const result = {
      id: u.id,
      email: u.email,
      displayName: u.display_name,
      about: u.about || '',
      avatarBytes,
      avatarMime: u.avatar_mime || null,
      bannerBytes,
      bannerMime: u.banner_mime || null,
      registrationDate: u.created_at,
      isAdmin: u.is_admin || 0,
      isAdminLevel2: u.is_admin === 2,
      isTwoFAEnabled: !!u.is_twofa_enabled
    };
    
    console.log('=== DEBUG check-auth ===');
    console.log('User is_admin from DB:', u.is_admin);
    console.log('Calculated isAdmin:', result.isAdmin);
    console.log('Calculated isAdminLevel2:', result.isAdminLevel2);

    console.log('check-auth: Returning user data:', {
      id: result.id,
      displayName: result.displayName,
      hasAvatar: !!result.avatarBytes,
      hasBanner: !!result.bannerBytes,
      avatarSize: result.avatarBytes ? result.avatarBytes.length : 0,
      bannerSize: result.bannerBytes ? result.bannerBytes.length : 0
    });

    return result;
  } catch (err) {
    console.error('Auth check error:', err);
    return null;
  }
});



// –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤
ipcMain.handle('searchArtists', async (event, query) => {
  let connection;
  try {
    connection = await pool.getConnection();
    const [rows] = await connection.query(
      'SELECT id, name FROM Artists WHERE name LIKE ? LIMIT 5',
      [`%${query}%`]
    );
    return rows;
  } catch (err) {
    console.error('Error searching artists:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
ipcMain.handle('createArtist', async (event, name) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞—Ä—Ç–∏—Å—Ç
    const [existing] = await connection.query(
      'SELECT id FROM Artists WHERE name = ?',
      [name]
    );
    
    if (existing.length > 0) {
      return existing[0].id;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
    const [result] = await connection.query(
      'INSERT INTO Artists (name) VALUES (?)',
      [name]
    );
    
    return result.insertId;
  } catch (err) {
    console.error('Error creating artist:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

ipcMain.handle('submitRating', async (event, { releaseId, userId, ratings }) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ ratings
    const { textValue, structureValue, soundValue, voiceValue, individualityValue, atmosphereValue } = ratings;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –≤–∞—à–µ–π —Ñ–æ—Ä–º—É–ª–µ
    const arithmeticMean = (textValue + structureValue + soundValue + voiceValue + individualityValue + atmosphereValue) / 6;
    const geometricMean = Math.pow(
      textValue * structureValue * soundValue * voiceValue * individualityValue * atmosphereValue, 
      1/6
    );
    const host_rating = 0.5 * (arithmeticMean + geometricMean);
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await connection.beginTransaction();
    
  
    // –û–±–Ω–æ–≤–ª—è–µ–º host_rating –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ Releases
    await connection.query(
      `UPDATE Releases SET
        textValue = ?,
        structureValue = ?,
        soundValue = ?,
        voiceValue = ?,
        individualityValue = ?,
        atmosphereValue = ?,
        host_rating = ?
      WHERE id = ?`,
      [
        textValue,
        structureValue,
        soundValue,
        voiceValue,
        individualityValue,
        atmosphereValue,
        host_rating,
        releaseId
      ]
    );
    
    // –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await connection.commit();
    
    return { 
      success: true
    };
  } catch (err) {
    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if (connection) await connection.rollback();
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–∏–∑–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
ipcMain.handle('submit-user-rating', async (event, { releaseId, userId, ratings }) => {
  let connection;
  try {
    connection = await pool.getConnection();

    const { textValue, structureValue, soundValue, voiceValue, individualityValue, atmosphereValue } = ratings;

    const arithmeticMean = (textValue + structureValue + soundValue + voiceValue + individualityValue + atmosphereValue) / 6;
    const geometricMean = Math.pow(textValue * structureValue * soundValue * voiceValue * individualityValue * atmosphereValue, 1/6);
    const user_score = 0.5 * (arithmeticMean + geometricMean);

    await connection.beginTransaction();

    // UPSERT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –æ—Ü–µ–Ω–∫–∏
    await connection.query(
      `INSERT INTO UserReleaseRatings (
         user_id, release_id,
         textValue, structureValue, soundValue, voiceValue, individualityValue, atmosphereValue,
         score, created_at, updated_at
       ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
       ON DUPLICATE KEY UPDATE
         textValue = VALUES(textValue),
         structureValue = VALUES(structureValue),
         soundValue = VALUES(soundValue),
         voiceValue = VALUES(voiceValue),
         individualityValue = VALUES(individualityValue),
         atmosphereValue = VALUES(atmosphereValue),
         score = VALUES(score),
         updated_at = NOW()`,
      [
        userId, releaseId,
        textValue, structureValue, soundValue, voiceValue, individualityValue, atmosphereValue,
        user_score
      ]
    );

    // –ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
    const [avgRows] = await connection.query(
      `SELECT AVG(score) AS avg_score FROM UserReleaseRatings WHERE release_id = ?`,
      [releaseId]
    );

    const avgScore = avgRows[0]?.avg_score || null;
    console.log('Calculating average user rating:', { releaseId, avgScore, avgRows });

    await connection.query(
      `UPDATE Releases SET average_user_rating = ? WHERE id = ?`,
      [avgScore, releaseId]
    );
    
    console.log('Updated average_user_rating in Releases table:', { releaseId, avgScore });

    await connection.commit();

    return { success: true, average_user_rating: avgScore, user_score };
  } catch (err) {
    if (connection) await connection.rollback();
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –æ—Ü–µ–Ω–∫–∏:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—Ü–µ–Ω–æ–∫ —Ä–µ–ª–∏–∑–∞
ipcMain.handle('get-release-user-ratings', async (event, releaseId) => {
  let connection;
  try {
    console.log('–ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —Ä–µ–ª–∏–∑–∞:', releaseId);
    connection = await pool.getConnection();
    
    const [rows] = await connection.query(
      `SELECT urr.user_id, u.display_name, urr.score, urr.textValue, urr.structureValue, urr.soundValue,
              urr.voiceValue, urr.individualityValue, urr.atmosphereValue, urr.updated_at
       FROM UserReleaseRatings urr
       JOIN Users u ON u.id = urr.user_id
       WHERE urr.release_id = ?
       ORDER BY urr.updated_at DESC`,
      [releaseId]
    );
    console.log('–ù–∞–π–¥–µ–Ω–æ –æ—Ü–µ–Ω–æ–∫:', rows.length);
    return rows;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—Ü–µ–Ω–æ–∫:', err);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      message: err.message,
      code: err.code,
      sqlState: err.sqlState,
      sqlMessage: err.sqlMessage
    });
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
ipcMain.handle('get-user-by-id', async (event, userId) => {
  let connection;
  try {
    console.log('–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID:', userId);
    connection = await pool.getConnection();
    
    const [rows] = await connection.query(
      `SELECT id, display_name, email, avatar, avatar_mime, banner, banner_mime, 
              about, created_at
       FROM Users 
       WHERE id = ?`,
      [userId]
    );
    
    if (rows.length === 0) {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID', userId, '–Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    }
    
    const user = rows[0];
    console.log('–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
      id: user.id,
      display_name: user.display_name,
      has_avatar: !!user.avatar,
      has_banner: !!user.banner,
      avatar_size: user.avatar ? user.avatar.length : 0,
      banner_size: user.banner ? user.banner.length : 0
    });
    
    // Buffer -> Uint8Array (–ø–æ IPC —É–µ–¥–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
    const avatarBytes = user.avatar ? new Uint8Array(user.avatar) : null;
    const bannerBytes = user.banner ? new Uint8Array(user.banner) : null;
    
    const result = {
      id: user.id,
      displayName: user.display_name,
      email: user.email,
      avatarBytes,
      avatarMime: user.avatar_mime || null,
      bannerBytes,
      bannerMime: user.banner_mime || null,
      about: user.about || '',
      registrationDate: user.created_at
    };
    
    console.log('–í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      id: result.id,
      displayName: result.displayName,
      hasAvatarBytes: !!result.avatarBytes,
      hasBannerBytes: !!result.bannerBytes,
      avatarBytesSize: result.avatarBytes ? result.avatarBytes.length : 0,
      bannerBytesSize: result.bannerBytes ? result.bannerBytes.length : 0
    });
    
    return result;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –∏–º)
ipcMain.handle('get-user-rated-releases', async (event, userId) => {
  let connection;
  try {
    console.log('–ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    connection = await pool.getConnection();
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (is_admin = 2)
    const [userRows] = await connection.query(
      'SELECT is_admin FROM Users WHERE id = ?',
      [userId]
    );
    
    if (userRows.length === 0) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const isAdmin = userRows[0].is_admin === 2;
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} is_admin: ${userRows[0].is_admin}, isAdmin: ${isAdmin}`);
    
    let query, params;
    
    if (isAdmin) {
      // –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (is_admin = 2) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–ª–∏–∑—ã —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –∞–≤—Ç–æ—Ä–∞
      query = `
        SELECT r.id, r.title, r.type, r.host_rating, r.average_user_rating, r.add_date, r.image,
                GROUP_CONCAT(a.name SEPARATOR ', ') AS artist_names,
                r.host_rating as user_score, r.add_date as rating_date
         FROM Releases r
         JOIN ReleaseArtists ra ON r.id = ra.release_id
         JOIN Artists a ON ra.artist_id = a.id
         WHERE r.host_rating IS NOT NULL AND r.host_rating > 0
         GROUP BY r.id
         ORDER BY r.add_date DESC
      `;
      params = [];
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö –æ—Ü–µ–Ω–∫–∏
      query = `
        SELECT r.id, r.title, r.type, r.host_rating, r.average_user_rating, r.add_date, r.image,
                GROUP_CONCAT(a.name SEPARATOR ', ') AS artist_names,
                urr.score as user_score, urr.updated_at as rating_date
         FROM UserReleaseRatings urr
         JOIN Releases r ON r.id = urr.release_id
         JOIN ReleaseArtists ra ON r.id = ra.release_id
         JOIN Artists a ON ra.artist_id = a.id
         WHERE urr.user_id = ?
         GROUP BY r.id
         ORDER BY urr.updated_at DESC
      `;
      params = [userId];
    }
    
    const [rows] = await connection.query(query, params);
    
    return rows.map(row => ({
      id: row.id,
      title: row.title,
      type: row.type,
      host_rating: row.host_rating,
      average_user_rating: row.average_user_rating,
      add_date: row.add_date,
      image: row.image,
      artist_names: row.artist_names,
      user_score: row.user_score,
      rating_date: row.rating_date,
      is_admin_rating: isAdmin // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —ç—Ç–æ –æ—Ü–µ–Ω–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    }));
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
ipcMain.handle('get-user-favorites', async (event, userId) => {
  let connection;
  try {
    console.log('–ó–∞–ø—Ä–æ—Å –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    connection = await pool.getConnection();
    
    const [rows] = await connection.query(
      `SELECT r.id, r.title, r.type, r.host_rating, r.average_user_rating, r.add_date, r.image,
              GROUP_CONCAT(a.name SEPARATOR ', ') AS artist_names,
              uf.added_date, uf.is_pinned
       FROM UserFavorites uf
       JOIN Releases r ON r.id = uf.release_id
       JOIN ReleaseArtists ra ON r.id = ra.release_id
       JOIN Artists a ON ra.artist_id = a.id
       WHERE uf.user_id = ?
       GROUP BY r.id
       ORDER BY uf.is_pinned DESC, uf.added_date DESC`,
      [userId]
    );
    
    return rows.map(row => ({
      id: row.id,
      title: row.title,
      type: row.type,
      host_rating: row.host_rating,
      average_user_rating: row.average_user_rating,
      add_date: row.add_date,
      image: row.image,
      artist_names: row.artist_names,
      added_date: row.added_date,
      is_pinned: row.is_pinned
    }));
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
ipcMain.handle('get-user-artist-favorites', async (event, userId) => {
  let connection;
  try {
    console.log('–ó–∞–ø—Ä–æ—Å –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    connection = await pool.getConnection();
    
    const [rows] = await connection.query(
      `SELECT a.id, a.name, uaf.added_date, uaf.is_pinned, uaf.avatar_cache
       FROM UserArtistFavorites uaf
       JOIN Artists a ON a.id = uaf.artist_id
       WHERE uaf.user_id = ?
       ORDER BY uaf.is_pinned DESC, uaf.added_date DESC`,
      [userId]
    );
    
    return rows.map(row => ({
      id: row.id,
      name: row.name,
      added_date: row.added_date,
      is_pinned: row.is_pinned,
      avatar_cache: row.avatar_cache
    }));
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ipcMain.handle
ipcMain.handle('get-average-color', async (_, imageBuffer) => {
  try {
    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ imageBuffer - —ç—Ç–æ Buffer –∏–ª–∏ Uint8Array
    if (!imageBuffer || !imageBuffer.data || !(imageBuffer.data instanceof Uint8Array)) {
      throw new Error('Invalid image buffer');
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Buffer/Uint8Array –≤ ArrayBuffer
    const buffer = imageBuffer.data instanceof Buffer ? 
      imageBuffer.data.buffer : 
      imageBuffer.data;
    
    const color = await getAverageColor(buffer);
    console.log('Calculated average color:', color.hex); // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥
    return { success: true, color: color.hex };
  } catch (e) {
    console.error('Error calculating average color:', e);
    return { success: false, color: '#7830B7' };
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
ipcMain.handle('createRelease', async (event, { title, type, date, image, artistIds }) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await connection.beginTransaction();
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–ª–∏–∑
    const [result] = await connection.query(
      `INSERT INTO Releases 
       (title, type, add_date, image) 
       VALUES (?, ?, ?, ?)`,
      [title, type, date, image ? Buffer.from(image) : null]
    );
    
    const releaseId = result.insertId;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Å –∞—Ä—Ç–∏—Å—Ç–∞–º–∏
    for (const artistId of artistIds) {
      await connection.query(
        'INSERT INTO ReleaseArtists (release_id, artist_id) VALUES (?, ?)',
        [releaseId, artistId]
      );
    }
    
    // –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await connection.commit();
    
    // –û—á–∏—â–∞–µ–º –∫—ç—à —Ä–µ–ª–∏–∑–æ–≤
    clearReleasesCache();
    
    return releaseId;
  } catch (err) {
    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (connection) await connection.rollback();
    console.error('Error creating release:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

ipcMain.handle('check-user-exists', async (event, { email, displayName }) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º email
    const [emailRows] = await connection.query(
      'SELECT 1 FROM Users WHERE email = ?', 
      [email]
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º displayName
    const [nameRows] = await connection.query(
      'SELECT 1 FROM Users WHERE display_name = ?', 
      [displayName]
    );
    
    return { 
      emailExists: emailRows.length > 0,
      displayNameExists: nameRows.length > 0
    };
  } catch (error) {
    console.error('Error checking user existence:', error);
    throw error;
  } finally {
    if (connection) connection.release();
  }
});

ipcMain.handle('logout-user', async () => {
  try {
    const token = loadSession();
    if (token) {
      const connection = await pool.getConnection();
      await connection.query(
        'UPDATE Users SET auth_token = NULL WHERE auth_token = ?',
        [token]
      );
      connection.release();
    }
    clearSession();
    return { success: true };
  } catch (err) {
    console.error('Logout error:', err);
    throw err;
  }
});

// –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ get-release-details (main.js)
ipcMain.handle('get-release-details', async (event, releaseId) => {
  let connection;
  try {
    connection = await pool.getConnection();

    const [rows] = await connection.query(`
      SELECT 
        r.id,
        r.title,
        r.type,
        r.host_rating,
        r.average_user_rating,
        r.add_date,
        r.image,
        r.textValue,
        r.structureValue,
        r.soundValue,
        r.voiceValue,
        r.individualityValue,
        r.atmosphereValue,
        DATE(r.add_date) as release_date,
        GROUP_CONCAT(a.name SEPARATOR ', ') AS artist_names,
        GROUP_CONCAT(a.id SEPARATOR ', ') AS artist_ids
      FROM Releases r
      JOIN ReleaseArtists ra ON r.id = ra.release_id
      JOIN Artists a ON ra.artist_id = a.id
      WHERE r.id = ?
      GROUP BY r.id
    `, [releaseId]);

    if (rows.length === 0) return null;

    const row = rows[0];
    console.log('Release details data:', { 
      id: row.id, 
      title: row.title, 
      host_rating: row.host_rating, 
      average_user_rating: row.average_user_rating 
    });

    return {
      id: row.id,
      title: row.title,
      type: row.type,
      host_rating: row.host_rating,
      average_user_rating: row.average_user_rating,
      add_date: row.add_date,
      release_date: row.release_date,
      textValue: row.textValue,
      structureValue: row.structureValue,
      soundValue: row.soundValue,
      voiceValue: row.voiceValue,
      individualityValue: row.individualityValue,
      atmosphereValue: row.atmosphereValue,
      image: row.image ? row.image : null,
      artist_names: row.artist_names,
      artist_ids: row.artist_ids.split(',').map(id => id.trim())  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    };

  } catch (err) {
    console.error('Error fetching release details:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});



// const puppeteer = require('puppeteer');

// ipcMain.handle('fetch-lyrics', async (event, { artist, title }) => {
//   let browser;
//   try {
//     const query = `${artist} ${title}`;
//     const searchUrl = `https://api.genius.com/search?q=${encodeURIComponent(query)}`;

//     const { data } = await axios.get(searchUrl, {
//       headers: {
//         Authorization: `Bearer 9oDUQ5Y20njJ_sq2LPjtwJAoaQ5f2nAKxAe0iVH0CRiYbGU02uywCvsXXOHSOTje`
//       }
//     });

//     const hits = data.response.hits;
//     if (!hits || hits.length === 0) throw new Error('Song not found');

//     const normalize = str => str.toLowerCase()
//       .replace(/[\W_]+/g, '')
//       .replace(/—ë/g, '–µ');

//     const normalizedArtist = normalize(artist);
//     const normalizedTitle = normalize(title);

//     const match = hits.find(hit => {
//       const hitArtist = normalize(hit.result.primary_artist.name);
//       const hitTitle = normalize(hit.result.title);
//       return hitArtist.includes(normalizedArtist) && hitTitle.includes(normalizedTitle);
//     }) || hits[0];

//     const songUrl = `https://genius.com${match.result.path}`;

//     browser = await puppeteer.launch({
//       headless: true,
//       args: ['--no-sandbox', '--disable-setuid-sandbox']
//     });
//     const page = await browser.newPage();
    
//     await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
//     await page.setViewport({ width: 1200, height: 800 });
//     await page.goto(songUrl, { 
//       waitUntil: 'domcontentloaded',
//       timeout: 30000
//     });

//     // üîΩ –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
//     const lyrics = await extractLyricsFromPage(page);

//     if (!lyrics || lyrics.length < 50) {
//       throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑–º–µ–Ω–∏–ª–∞—Å—å.');
//     }

//     console.log('Successfully extracted lyrics');
//     return { success: true, lyrics };
//   } catch (err) {
//     console.error('Lyrics fetch error:', err.message);
//     return { 
//       success: false, 
//       error: err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏',
//       details: err.stack
//     };
//   } finally {
//     if (browser) await browser.close();
//   }
// });


// // üîΩ –í—ã–Ω–µ—Å–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏
// async function extractLyricsFromPage(page) {
//   // –≠–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
//   await autoScroll(page);

//   return await page.evaluate(() => {
//     // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å —Ç–µ–∫—Å—Ç–æ–º (–Ω–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è Genius 2024)
//     const lyricsContainers = Array.from(document.querySelectorAll(
//       'div[data-lyrics-container="true"], div[class*="Lyrics__Container"]'
//     ));

//     if (lyricsContainers.length > 0) {
//       // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
//       let fullLyrics = [];
      
//       lyricsContainers.forEach(container => {
//         const clone = container.cloneNode(true);
        
//         // –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
//         clone.querySelectorAll(
//           'a, button, svg, img, iframe, script, style, noscript, .EmbeddedPlayer__Container, .Label'
//         ).forEach(el => el.remove());
        
//         // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
//         clone.querySelectorAll('br').forEach(br => br.replaceWith('\n'));
        
//         // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –æ–±—â–∏–π –º–∞—Å—Å–∏–≤
//         fullLyrics.push(clone.innerText.trim());
//       });

//       // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ –æ—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
//       return fullLyrics.join('\n\n')
//         .replace(/\r\n/g, '\n')
//         .replace(/\n{3,}/g, '\n\n')
//         .trim();
//     }

//     // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Genius
//     const oldLyricsContainer = document.querySelector('.lyrics');
//     if (oldLyricsContainer) {
//       return oldLyricsContainer.innerText
//         .trim()
//         .replace(/\r\n/g, '\n')
//         .replace(/\n{3,}/g, '\n\n');
//     }

//     return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏";
//   });
// }

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function autoScroll(page) {
  await page.evaluate(async () => {
    await new Promise((resolve) => {
      let totalHeight = 0;
      const distance = 500;
      const scrollInterval = setInterval(() => {
        const scrollHeight = document.body.scrollHeight;
        window.scrollBy(0, distance);
        totalHeight += distance;

        if (totalHeight >= scrollHeight) {
          clearInterval(scrollInterval);
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
          setTimeout(resolve, 2000);
        }
      }, 200);
    });
  });
}

// –ö—ç—à –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∞—Ä—Ç–∏—Å—Ç–æ–≤
const artistImageCache = new Map();
// Pending login sessions awaiting 2FA verification
const pendingLogins = new Map(); // pendingId -> { userId, email, createdAt }
// Pending 2FA setup secrets per current session token
const twofaSetupPending = new Map(); // token -> { secretBase32, createdAt }
// 2FA attempt tracking per pendingId
const twofaAttempts = new Map(); // pendingId -> { attempts: number, lastAttempt: timestamp, blockedUntil: timestamp }

// ===== TOTP (Google Authenticator) helpers =====
function base32ToBuffer(base32) {
  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';
  let bits = '';
  let buffer = [];
  const clean = (base32 || '').replace(/=+$/, '').toUpperCase().replace(/\s+/g, '');
  for (let i = 0; i < clean.length; i++) {
    const val = alphabet.indexOf(clean[i]);
    if (val === -1) continue;
    bits += val.toString(2).padStart(5, '0');
  }
  for (let j = 0; j + 8 <= bits.length; j += 8) {
    buffer.push(parseInt(bits.substring(j, j + 8), 2));
  }
  return Buffer.from(buffer);
}

function generateRandomSecretBase32(length = 32) {
  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';
  const bytes = crypto.randomBytes(length);
  let out = '';
  for (let i = 0; i < bytes.length; i++) {
    out += alphabet[bytes[i] % alphabet.length];
  }
  return out;
}

function hotp(secretBuffer, counter, digits = 6) {
  const counterBuffer = Buffer.alloc(8);
  counterBuffer.writeBigUInt64BE(BigInt(counter));
  const hmac = crypto.createHmac('sha1', secretBuffer).update(counterBuffer).digest();
  const offset = hmac[hmac.length - 1] & 0x0f;
  const code = ((hmac[offset] & 0x7f) << 24) | ((hmac[offset + 1] & 0xff) << 16) | ((hmac[offset + 2] & 0xff) << 8) | (hmac[offset + 3] & 0xff);
  const otp = (code % 10 ** digits).toString().padStart(digits, '0');
  return otp;
}

function verifyTotp(secretBase32, code, timeStep = 30, digits = 6, skew = 1) {
  try {
    const secretBuffer = base32ToBuffer(secretBase32);
    const counter = Math.floor(Date.now() / 1000 / timeStep);
    const normalized = String(code || '').replace(/\s+/g, '');
    for (let i = -skew; i <= skew; i++) {
      const candidate = hotp(secretBuffer, counter + i, digits);
      if (candidate === normalized) return true;
    }
  } catch (e) {
    return false;
  }
  return false;
}

async function recordLoginHistory(connection, userId) {
  try {
    const platform = os.platform();
    const release = os.release();
    const arch = os.arch();
    const osInfo = `${platform} ${release} (${arch})`;
    let ipAddress = null;
    try {
      const { data } = await axios.get('https://api.ipify.org?format=json', { timeout: 5000 });
      ipAddress = data && data.ip ? data.ip : null;
    } catch (e) {
      ipAddress = null;
    }
    await connection.query(
      'INSERT INTO UserLoginHistory (user_id, ip_address, os_info) VALUES (?, ?, ?)',
      [userId, ipAddress, osInfo]
    );
  } catch (e) {
    console.warn('Failed to record login history:', e.message);
  }
}

// ====== ARTIST FAVORITES SYSTEM ======

// –î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏—Å—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
ipcMain.handle('add-artist-to-favorites', async (event, { userId, artistId }) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∞—Ä—Ç–∏—Å—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    const [existing] = await connection.query(
      'SELECT id FROM UserArtistFavorites WHERE user_id = ? AND artist_id = ?',
      [userId, artistId]
    );
    
    if (existing.length > 0) {
      return { success: false, message: '–ê—Ä—Ç–∏—Å—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º' };
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    await connection.query(
      'INSERT INTO UserArtistFavorites (user_id, artist_id) VALUES (?, ?)',
      [userId, artistId]
    );
    
    return { success: true, message: '–ê—Ä—Ç–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' };
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏—Å—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', err);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏—Å—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
  } finally {
    if (connection) connection.release();
  }
});

// –£–¥–∞–ª–∏—Ç—å –∞—Ä—Ç–∏—Å—Ç–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
ipcMain.handle('remove-artist-from-favorites', async (event, { userId, artistId }) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    const [result] = await connection.query(
      'DELETE FROM UserArtistFavorites WHERE user_id = ? AND artist_id = ?',
      [userId, artistId]
    );
    
    if (result.affectedRows === 0) {
      return { success: false, message: '–ê—Ä—Ç–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º' };
    }
    
    return { success: true, message: '–ê—Ä—Ç–∏—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' };
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—Ä—Ç–∏—Å—Ç–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', err);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞—Ä—Ç–∏—Å—Ç–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
  } finally {
    if (connection) connection.release();
  }
});

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ª–∏ –∞—Ä—Ç–∏—Å—Ç
ipcMain.handle('is-artist-favorite', async (event, { userId, artistId }) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    const [rows] = await connection.query(
      'SELECT id FROM UserArtistFavorites WHERE user_id = ? AND artist_id = ?',
      [userId, artistId]
    );
    
    return { isFavorite: rows.length > 0 };
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞:', err);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞');
  } finally {
    if (connection) connection.release();
  }
});

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞ (pin/unpin)
ipcMain.handle('toggle-artist-favorite-pin', async (event, { userId, artistId }) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä—Ç–∏—Å—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    const [existing] = await connection.query(
      'SELECT id, is_pinned FROM UserArtistFavorites WHERE user_id = ? AND artist_id = ?',
      [userId, artistId]
    );
    
    if (existing.length === 0) {
      return { success: false, message: '–ê—Ä—Ç–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º' };
    }
    
    const currentPinStatus = existing[0].is_pinned;
    const newPinStatus = currentPinStatus ? 0 : 1;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö (–º–∞–∫—Å–∏–º—É–º 5)
    if (newPinStatus === 1) {
      const [pinnedCount] = await connection.query(
        'SELECT COUNT(*) as count FROM UserArtistFavorites WHERE user_id = ? AND is_pinned = 1',
        [userId]
      );
      
      if (pinnedCount[0].count >= 5) {
        return { success: false, message: '–ú–æ–∂–Ω–æ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 5 –∞—Ä—Ç–∏—Å—Ç–æ–≤.' };
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
    await connection.query(
      'UPDATE UserArtistFavorites SET is_pinned = ? WHERE user_id = ? AND artist_id = ?',
      [newPinStatus, userId, artistId]
    );
    
    return { 
      success: true, 
      message: newPinStatus ? '–ê—Ä—Ç–∏—Å—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω' : '–ê—Ä—Ç–∏—Å—Ç –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω', 
      isPinned: newPinStatus === 1 
    };
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∞—Ä—Ç–∏—Å—Ç–∞:', err);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∞—Ä—Ç–∏—Å—Ç–∞');
  } finally {
    if (connection) connection.release();
  }
});


// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –∞—Ä—Ç–∏—Å—Ç–∞ –≤ –∫—ç—à
ipcMain.handle('cache-artist-avatar', async (event, { userId, artistId, avatarData }) => {
  let connection;
  try {
    console.log('Caching avatar for user:', userId, 'artist:', artistId, 'data size:', avatarData?.length);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!userId || !artistId || !avatarData) {
      throw new Error('Missing required parameters: userId, artistId, or avatarData');
    }
    
    connection = await pool.getConnection();
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    try {
      const [tableInfo] = await connection.query('SHOW COLUMNS FROM UserArtistFavorites');
      console.log('Table structure:', tableInfo);
    } catch (descError) {
      console.log('Could not describe table:', descError.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    const [existing] = await connection.query(
      'SELECT id FROM UserArtistFavorites WHERE user_id = ? AND artist_id = ?',
      [userId, artistId]
    );
    
    console.log('Existing records found:', existing.length);
    
    if (existing.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      console.log('Updating existing record');
      const bufferData = Buffer.from(avatarData);
      await connection.query(
        'UPDATE UserArtistFavorites SET avatar_cache = ? WHERE user_id = ? AND artist_id = ?',
        [bufferData, userId, artistId]
      );
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
      console.log('Creating new record');
      console.log('Inserting values:', { userId, artistId, avatarDataSize: avatarData.length });
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π INSERT
      const insertQuery = 'INSERT INTO UserArtistFavorites (user_id, artist_id, avatar_cache) VALUES (?, ?, ?)';
      console.log('Insert query:', insertQuery);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Uint8Array –≤ Buffer –¥–ª—è MySQL
      const bufferData = Buffer.from(avatarData);
      console.log('Buffer data size:', bufferData.length);
      
      await connection.query(insertQuery, [userId, artistId, bufferData]);
    }
    
    console.log('Avatar cached successfully');
    return { success: true };
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –∞—Ä—Ç–∏—Å—Ç–∞:', err);
    console.error('Error details:', {
      message: err.message,
      code: err.code,
      sqlState: err.sqlState,
      sqlMessage: err.sqlMessage
    });
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –∞—Ä—Ç–∏—Å—Ç–∞: ${err.message}`);
  } finally {
    if (connection) connection.release();
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –∞—Ä—Ç–∏—Å—Ç–∞
ipcMain.handle('get-cached-artist-avatar', async (event, { userId, artistId }) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    const [rows] = await connection.query(
      'SELECT avatar_cache FROM UserArtistFavorites WHERE user_id = ? AND artist_id = ?',
      [userId, artistId]
    );
    
    if (rows.length > 0 && rows[0].avatar_cache) {
      return { 
        success: true, 
        avatar: new Uint8Array(rows[0].avatar_cache) 
      };
    }
    
    return { success: false, avatar: null };
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –∞—Ä—Ç–∏—Å—Ç–∞:', err);
    return { success: false, avatar: null };
  } finally {
    if (connection) connection.release();
  }
});

// ====== FAVORITES SYSTEM ======

// –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ª–∏–∑ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
ipcMain.handle('add-to-favorites', async (event, { userId, releaseId }) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Ä–µ–ª–∏–∑ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    const [existing] = await connection.query(
      'SELECT id FROM UserFavorites WHERE user_id = ? AND release_id = ?',
      [userId, releaseId]
    );
    
    if (existing.length > 0) {
      return { success: false, message: '–†–µ–ª–∏–∑ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º' };
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    await connection.query(
      'INSERT INTO UserFavorites (user_id, release_id) VALUES (?, ?)',
      [userId, releaseId]
    );
    
    return { success: true, message: '–†–µ–ª–∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' };
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', err);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
  } finally {
    if (connection) connection.release();
  }
});

// –£–¥–∞–ª–∏—Ç—å —Ä–µ–ª–∏–∑ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
ipcMain.handle('remove-from-favorites', async (event, { userId, releaseId }) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    const [result] = await connection.query(
      'DELETE FROM UserFavorites WHERE user_id = ? AND release_id = ?',
      [userId, releaseId]
    );
    
    if (result.affectedRows === 0) {
      return { success: false, message: '–†–µ–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º' };
    }
    
    return { success: true, message: '–†–µ–ª–∏–∑ —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' };
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', err);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
  } finally {
    if (connection) connection.release();
  }
});

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ª–∏ —Ä–µ–ª–∏–∑
ipcMain.handle('is-favorite', async (event, { userId, releaseId }) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    const [rows] = await connection.query(
      'SELECT id FROM UserFavorites WHERE user_id = ? AND release_id = ?',
      [userId, releaseId]
    );
    
    return { isFavorite: rows.length > 0 };
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', err);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
  } finally {
    if (connection) connection.release();
  }
});

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–ª–∏–∑–∞ (pin/unpin)
ipcMain.handle('toggle-favorite-pin', async (event, { userId, releaseId }) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–ª–∏–∑ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    const [existing] = await connection.query(
      'SELECT id, is_pinned FROM UserFavorites WHERE user_id = ? AND release_id = ?',
      [userId, releaseId]
    );
    
    if (existing.length === 0) {
      return { success: false, message: '–†–µ–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º' };
    }
    
    const currentPinStatus = existing[0].is_pinned;
    const newPinStatus = currentPinStatus ? 0 : 1;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö (–º–∞–∫—Å–∏–º—É–º 5)
    if (newPinStatus === 1) {
      const [pinnedCount] = await connection.query(
        'SELECT COUNT(*) as count FROM UserFavorites WHERE user_id = ? AND is_pinned = 1',
        [userId]
      );
      
      if (pinnedCount[0].count >= 5) {
        return { success: false, message: '–ú–∞–∫—Å–∏–º—É–º 5 —Ä–µ–ª–∏–∑–æ–≤ –º–æ–∂–Ω–æ –∑–∞–∫—Ä–µ–ø–∏—Ç—å' };
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
    await connection.query(
      'UPDATE UserFavorites SET is_pinned = ? WHERE user_id = ? AND release_id = ?',
      [newPinStatus, userId, releaseId]
    );
    
    return { 
      success: true, 
      message: newPinStatus ? '–†–µ–ª–∏–∑ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω' : '–†–µ–ª–∏–∑ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω', 
      isPinned: newPinStatus === 1 
    };
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è:', err);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è');
  } finally {
    if (connection) connection.release();
  }
});

// –î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ (—Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
ipcMain.handle('toggle-pin-release', async (event, { userId, releaseId }) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –ª–∏ —É–∂–µ —Ä–µ–ª–∏–∑
    const [existing] = await connection.query(
      'SELECT id FROM UserFavorites WHERE user_id = ? AND release_id = ?',
      [userId, releaseId]
    );
    
    if (existing.length > 0) {
      // –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ
      await connection.query(
        'DELETE FROM UserFavorites WHERE user_id = ? AND release_id = ?',
        [userId, releaseId]
      );
      return { success: true, message: '–†–µ–ª–∏–∑ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω', isPinned: false };
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ
      await connection.query(
        'INSERT INTO UserFavorites (user_id, release_id) VALUES (?, ?)',
        [userId, releaseId]
      );
      return { success: true, message: '–†–µ–ª–∏–∑ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω', isPinned: true };
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è:', err);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è');
  } finally {
    if (connection) connection.release();
  }
});


// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä—Ç–∏—Å—Ç–µ
ipcMain.handle('get-artist-details', async (event, artistId) => {
  let connection;
  try {
    connection = await pool.getConnection();

    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ ID –∏–∑ –±–∞–∑—ã
    const [artistRows] = await connection.query(
      'SELECT id, name FROM Artists WHERE id = ?',
      [artistId]
    );

    if (artistRows.length === 0) return null;

    const artist = artistRows[0];

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    const [ratingRows] = await connection.query(`
      SELECT AVG(r.host_rating) as average_rating 
      FROM Releases r
      JOIN ReleaseArtists ra ON r.id = ra.release_id
      WHERE ra.artist_id = ?
    `, [artistId]);

    let avatarUrl = null;
    let avatarData = null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (artistImageCache.has(artist.name)) {
      avatarUrl = artistImageCache.get(artist.name);
    } else {
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      avatarUrl = await findArtistImage(artist.name);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (–¥–∞–∂–µ –µ—Å–ª–∏ null)
      artistImageCache.set(artist.name, avatarUrl);
    }

    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∞–≤–∞—Ç–∞—Ä, —Å–∫–∞—á–∏–≤–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    if (avatarUrl) {
      try {
        const response = await axios.get(avatarUrl, { 
          responseType: 'arraybuffer',
          timeout: 10000 
        });
        avatarData = new Uint8Array(response.data);
      } catch (downloadError) {
        console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞:', downloadError);
      }
    }

    return {
      id: artist.id,
      name: artist.name,
      average_rating: ratingRows[0].average_rating ? ratingRows[0].average_rating.toFixed(1) : null,
      avatar: avatarUrl,
      avatarData: avatarData // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    };
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ get-artist-details:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞—Ä—Ç–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
async function findArtistImage(artistName) {
  const searchPromises = [];
  
  // 1. Genius API (–±—ã—Å—Ç—Ä—ã–π)
  searchPromises.push(searchGeniusAPI(artistName));
  
  // 2. Last.fm API (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä—É—Å—Å–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏)
  searchPromises.push(searchLastFM(artistName));
  
  // 3. Google Images API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
  searchPromises.push(searchGoogleImages(artistName));
  
  // 4. –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –∏–º–µ–Ω
  if (isRussianName(artistName)) {
    const transliterated = transliterateRussian(artistName);
    searchPromises.push(searchGeniusAPI(transliterated));
    searchPromises.push(searchLastFM(transliterated));
  }
  
  try {
    // –ñ–¥–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const results = await Promise.allSettled(searchPromises);
    
    for (const result of results) {
      if (result.status === 'fulfilled' && result.value) {
        return result.value;
      }
    }
    
    return null;
  } catch (error) {
    console.error('Error in findArtistImage:', error);
    return null;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–º—è —Ä—É—Å—Å–∫–∏–º
function isRussianName(name) {
  return /[–∞-—è—ë]/i.test(name);
}

// –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤
function transliterateRussian(text) {
  const translitMap = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
    '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
    '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
    '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
    '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
  };
  
  return text.toLowerCase().split('').map(char => 
    translitMap[char] || char
  ).join('');
}

// –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Genius API
async function searchGeniusAPI(artistName) {
  try {
    const query = encodeURIComponent(artistName);
    const response = await axios.get(`https://api.genius.com/search?q=${query}`, {
      headers: {
        Authorization: `Bearer 9oDUQ5Y20njJ_sq2LPjtwJAoaQ5f2nAKxAe0iVH0CRiYbGU02uywCvsXXOHSOTje`
      },
      timeout: 5000
    });

    const hits = response.data.response.hits;
    const match = hits.find(hit => {
      const name = hit.result.primary_artist.name.toLowerCase();
      return name === artistName.toLowerCase() || 
             name.includes(artistName.toLowerCase()) ||
             artistName.toLowerCase().includes(name);
    });

    if (match && match.result.primary_artist.image_url) {
      return match.result.primary_artist.image_url;
    }

    return null;
  } catch (error) {
    console.error('Genius API error:', error.message);
    return null;
  }
}

// –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Last.fm API
async function searchLastFM(artistName) {
  try {
    const query = encodeURIComponent(artistName);
    const response = await axios.get(`https://ws.audioscrobbler.com/2.0/?method=artist.getinfo&artist=${query}&api_key=YOUR_LASTFM_API_KEY&format=json`, {
      timeout: 5000
    });

    if (response.data.artist && response.data.artist.image) {
      // –ë–µ—Ä–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
      const images = response.data.artist.image;
      const largeImage = images.find(img => img.size === 'large') || 
                        images.find(img => img.size === 'medium') || 
                        images[images.length - 1];
      
      if (largeImage && largeImage['#text']) {
        return largeImage['#text'];
      }
    }

    return null;
  } catch (error) {
    console.error('Last.fm API error:', error.message);
    return null;
  }
}

// –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google Images (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async function searchGoogleImages(artistName) {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Custom Search API
    const query = encodeURIComponent(`${artistName} musician artist`);
    const response = await axios.get(`https://www.googleapis.com/customsearch/v1?key=YOUR_GOOGLE_API_KEY&cx=YOUR_SEARCH_ENGINE_ID&q=${query}&searchType=image&num=1`, {
      timeout: 5000
    });

    if (response.data.items && response.data.items.length > 0) {
      return response.data.items[0].link;
    }

    return null;
  } catch (error) {
    console.error('Google Images API error:', error.message);
    return null;
  }
}

// –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async function fetchArtistByName(artistName) {
  try {
    const query = encodeURIComponent(artistName);
    const response = await axios.get(`https://api.genius.com/search?q=${query}`, {
      headers: {
        Authorization: `Bearer 9oDUQ5Y20njJ_sq2LPjtwJAoaQ5f2nAKxAe0iVH0CRiYbGU02uywCvsXXOHSOTje`
      }
    });

    const hits = response.data.response.hits;
    const match = hits.find(hit => {
      const name = hit.result.primary_artist.name.toLowerCase();
      return name === artistName.toLowerCase();
    });

    if (match) {
      return {
        genius_id: match.result.primary_artist.id,
        name: match.result.primary_artist.name,
        url: match.result.primary_artist.url,
        image_url: match.result.primary_artist.image_url,
        header_image_url: match.result.primary_artist.header_image_url,
      };
    }

    return null;
  } catch (error) {
    console.error('Error fetching artist from Genius:', error.message);
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–∏–∑–æ–≤ –∞—Ä—Ç–∏—Å—Ç–∞
ipcMain.handle('get-artist-releases', async (event, artistId) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    const [rows] = await connection.query(
      `SELECT 
        r.id,
        r.title,
        r.type,
        r.host_rating,
        r.average_user_rating,
        r.add_date,
        r.image,
        ra.artist_id,
        GROUP_CONCAT(a.name SEPARATOR ', ') AS artist_names
      FROM Releases r
      JOIN ReleaseArtists ra ON r.id = ra.release_id
      JOIN Artists a ON ra.artist_id = a.id
      WHERE ra.artist_id = ?
      GROUP BY r.id
      ORDER BY r.add_date DESC`,
      [artistId]
    );

    
    return rows.map(row => ({
      id: row.id,
      title: row.title,
      type: row.type,
      host_rating: row.host_rating,
      average_user_rating: row.average_user_rating,
      add_date: row.add_date,
      image: row.image ? row.image : null,  
      artist_name: row.artist_names,
      artist_id: row.artist_id
    }));

  } catch (err) {
    console.error('Error fetching artist releases:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞
ipcMain.handle('login-user', async (event, { email, password }) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    const [users] = await connection.query(
      'SELECT * FROM Users WHERE email = ?', 
      [email]
    );
    
    if (users.length === 0) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    
    const user = users[0];
    const inputHash = crypto
      .pbkdf2Sync(password, user.salt, 1000, 64, 'sha512')
      .toString('hex');
    
    if (inputHash !== user.password_hash) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
    }

    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ 2FA, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    if (user.is_twofa_enabled) {
      const pendingId = crypto.randomBytes(16).toString('hex');
      pendingLogins.set(pendingId, { userId: user.id, email: user.email, createdAt: Date.now() });
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
      twofaAttempts.set(pendingId, { attempts: 0, lastAttempt: null, blockedUntil: null });
      return { success: true, requires2fa: true, pendingId };
    }

    // –ë–µ–∑ 2FA: –æ–±—ã—á–Ω—ã–π –≤—Ö–æ–¥
    const token = crypto.randomBytes(32).toString('hex');
    await connection.query('UPDATE Users SET auth_token = ? WHERE id = ?', [token, user.id]);
    saveSession(token);
    await recordLoginHistory(connection, user.id);

    return { success: true, user: { id: user.id, email: user.email, displayName: user.display_name } };
  } catch (err) {
    console.error('Login error:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ —Å 2FA
ipcMain.handle('verify-2fa-login', async (event, { pendingId, code }) => {
  let connection;
  try {
    const pending = pendingLogins.get(pendingId);
    if (!pending) {
      return { success: false, error: '–°–µ—Å—Å–∏—è –≤—Ö–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ' };
    }
    if (Date.now() - pending.createdAt > 5 * 60 * 1000) { // 5 –º–∏–Ω—É—Ç
      pendingLogins.delete(pendingId);
      twofaAttempts.delete(pendingId);
      return { success: false, error: '–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ' };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    const attemptData = twofaAttempts.get(pendingId);
    if (attemptData && attemptData.blockedUntil && Date.now() < attemptData.blockedUntil) {
      const remainingTime = Math.ceil((attemptData.blockedUntil - Date.now()) / 1000 / 60);
      return { success: false, error: `–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${remainingTime} –º–∏–Ω—É—Ç` };
    }

    connection = await pool.getConnection();
    const [rows] = await connection.query('SELECT id, display_name, email, twofa_secret FROM Users WHERE id = ?', [pending.userId]);
    if (rows.length === 0) {
      return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }
    const user = rows[0];
    const secretBase32 = user.twofa_secret ? Buffer.from(user.twofa_secret).toString('utf8') : null;
    if (!secretBase32) {
      return { success: false, error: '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏' };
    }
    const ok = verifyTotp(secretBase32, code);
    
    if (!ok) {
      // –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
      const currentAttempts = attemptData ? attemptData.attempts + 1 : 1;
      const remainingAttempts = 3 - currentAttempts;
      
      if (currentAttempts >= 3) {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ 10 –º–∏–Ω—É—Ç
        const blockedUntil = Date.now() + (10 * 60 * 1000);
        twofaAttempts.set(pendingId, { 
          attempts: currentAttempts, 
          lastAttempt: Date.now(), 
          blockedUntil: blockedUntil 
        });
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        setTimeout(() => {
          pendingLogins.delete(pendingId);
          twofaAttempts.delete(pendingId);
        }, 10 * 60 * 1000);
        return { success: false, error: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç', blocked: true };
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        twofaAttempts.set(pendingId, { 
          attempts: currentAttempts, 
          lastAttempt: Date.now(), 
          blockedUntil: null 
        });
        const attemptWord = remainingAttempts === 1 ? '–ø–æ–ø—ã—Ç–∫–∞' : '–ø–æ–ø—ã—Ç–∫–∏';
        return { success: false, error: `–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ 2FA. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å ${remainingAttempts} ${attemptWord}, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 10 –º–∏–Ω—É—Ç.` };
      }
    }

    // –£—Å–ø–µ—à–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è - –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const token = crypto.randomBytes(32).toString('hex');
    await connection.query('UPDATE Users SET auth_token = ? WHERE id = ?', [token, user.id]);
    saveSession(token);
    await recordLoginHistory(connection, user.id);
    pendingLogins.delete(pendingId);
    twofaAttempts.delete(pendingId);

    return { success: true, user: { id: user.id, email: user.email, displayName: user.display_name } };
  } catch (err) {
    console.error('2FA verify login error:', err);
    return { success: false, error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞' };
  } finally {
    if (connection) connection.release();
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—Ö–æ–¥–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
ipcMain.handle('get-login-history', async () => {
  const token = loadSession();
  if (!token) throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  let connection;
  try {
    connection = await pool.getConnection();
    const [users] = await connection.query('SELECT id FROM Users WHERE auth_token = ?', [token]);
    if (users.length === 0) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    const userId = users[0].id;
    const [rows] = await connection.query(
      'SELECT ip_address, os_info, created_at FROM UserLoginHistory WHERE user_id = ? ORDER BY created_at DESC LIMIT 50',
      [userId]
    );
    return rows;
  } catch (err) {
    console.error('get-login-history error:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
ipcMain.handle('change-password', async (event, { currentPassword, newPassword }) => {
  const token = loadSession();
  if (!token) throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  let connection;
  try {
    connection = await pool.getConnection();
    const [users] = await connection.query('SELECT id, password_hash, salt FROM Users WHERE auth_token = ?', [token]);
    if (users.length === 0) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    const user = users[0];
    const inputHash = crypto.pbkdf2Sync(currentPassword, user.salt, 1000, 64, 'sha512').toString('hex');
    if (inputHash !== user.password_hash) throw new Error('–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω');

    const newSalt = crypto.randomBytes(16).toString('hex');
    const newHash = crypto.pbkdf2Sync(newPassword, newSalt, 1000, 64, 'sha512').toString('hex');
    await connection.query('UPDATE Users SET password_hash = ?, salt = ? WHERE id = ?', [newHash, newSalt, user.id]);
    return { success: true };
  } catch (err) {
    console.error('change-password error:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

// –°–º–µ–Ω–∞ email (—á–µ—Ä–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–æ–¥–∞ –Ω–∞ –Ω–æ–≤—ã–π email)
ipcMain.handle('change-email', async (event, { newEmail, code }) => {
  const token = loadSession();
  if (!token) throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  let connection;
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ–≤–µ—Ä–µ–Ω)
    emailService.verifyConfirmationCode(newEmail, code);

    connection = await pool.getConnection();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –Ω–µ –∑–∞–Ω—è—Ç
    const [exists] = await connection.query('SELECT id FROM Users WHERE email = ?', [newEmail]);
    if (exists.length > 0) throw new Error('–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');

    await connection.query('UPDATE Users SET email = ? WHERE auth_token = ?', [newEmail, token]);
    return { success: true };
  } catch (err) {
    console.error('change-email error:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

// –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 2FA: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç –∏ otpauth URL
ipcMain.handle('init-2fa-setup', async () => {
  const token = loadSession();
  if (!token) throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  let connection;
  try {
    connection = await pool.getConnection();
    const [users] = await connection.query('SELECT id, email FROM Users WHERE auth_token = ?', [token]);
    if (users.length === 0) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    const user = users[0];
    const secretBase32 = generateRandomSecretBase32(32);
    twofaSetupPending.set(token, { secretBase32, createdAt: Date.now() });
    const issuer = encodeURIComponent('ChillMusic');
    const label = encodeURIComponent(user.email || 'user');
    const otpauth = `otpauth://totp/${issuer}:${label}?secret=${secretBase32}&issuer=${issuer}&algorithm=SHA1&digits=6&period=30`;
    return { success: true, secret: secretBase32, otpauth };
  } catch (err) {
    console.error('init-2fa-setup error:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ 2FA –∫–æ–¥–æ–º
ipcMain.handle('enable-2fa', async (event, { code }) => {
  const token = loadSession();
  if (!token) throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  let connection;
  try {
    const pending = twofaSetupPending.get(token);
    if (!pending) throw new Error('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
    if (Date.now() - pending.createdAt > 10 * 60 * 1000) { // 10 –º–∏–Ω—É—Ç
      twofaSetupPending.delete(token);
      throw new Error('–í—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ');
    }
    const ok = verifyTotp(pending.secretBase32, code);
    if (!ok) throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ 2FA');

    connection = await pool.getConnection();
    await connection.query('UPDATE Users SET twofa_secret = ?, is_twofa_enabled = 1 WHERE auth_token = ?', [Buffer.from(pending.secretBase32, 'utf8'), token]);
    twofaSetupPending.delete(token);
    return { success: true };
  } catch (err) {
    console.error('enable-2fa error:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ 2FA –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
ipcMain.handle('disable-2fa', async (event, { code }) => {
  const token = loadSession();
  if (!token) throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  let connection;
  try {
    connection = await pool.getConnection();
    const [rows] = await connection.query('SELECT twofa_secret FROM Users WHERE auth_token = ?', [token]);
    if (rows.length === 0) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    const secretBase32 = rows[0].twofa_secret ? Buffer.from(rows[0].twofa_secret).toString('utf8') : null;
    if (!secretBase32) throw new Error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    const ok = verifyTotp(secretBase32, code);
    if (!ok) throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ 2FA');
    await connection.query('UPDATE Users SET twofa_secret = NULL, is_twofa_enabled = 0 WHERE auth_token = ?', [token]);
    return { success: true };
  } catch (err) {
    console.error('disable-2fa error:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

// –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –æ—Ç–≤—è–∑–∫–∏ 2FA: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ email
ipcMain.handle('init-disable-2fa', async () => {
  const token = loadSession();
  if (!token) throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  let connection;
  try {
    connection = await pool.getConnection();
    const [rows] = await connection.query('SELECT email FROM Users WHERE auth_token = ?', [token]);
    if (rows.length === 0) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    const email = rows[0].email;
    await emailService.sendConfirmationEmail(email, 'ChillMusic');
    return { success: true };
  } catch (err) {
    console.error('init-disable-2fa error:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–≤—è–∑–∫–∏ 2FA: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ —Å email
ipcMain.handle('confirm-disable-2fa', async (event, { code }) => {
  const token = loadSession();
  if (!token) throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  let connection;
  try {
    connection = await pool.getConnection();
    const [rows] = await connection.query('SELECT id, email FROM Users WHERE auth_token = ?', [token]);
    if (rows.length === 0) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    const user = rows[0];
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º email-–∫–æ–¥
    emailService.verifyConfirmationCode(user.email, code);
    // –û—Ç–∫–ª—é—á–∞–µ–º 2FA
    await connection.query('UPDATE Users SET twofa_secret = NULL, is_twofa_enabled = 0 WHERE id = ?', [user.id]);
    return { success: true };
  } catch (err) {
    console.error('confirm-disable-2fa error:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
});


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// ===== TELEGRAM INTEGRATION =====
/*
–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:

1. –ß–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏):
   - TELEGRAM_GROUP_URL=https://t.me/chillmusicapp
   - TELEGRAM_BOT_TOKEN=7959964084:AAGJe1UcGDpy6LYBoPr6o_3agy6x8yrmpLE
   - TELEGRAM_CHAT_ID=2839297134

2. –ß–µ—Ä–µ–∑ Bot API (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):
   - –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather
   - –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   - –ü–æ–ª—É—á–∏—Ç–µ chat_id –≥—Ä—É–ø–ø—ã
   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

3. –ß–µ—Ä–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥ –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø:
   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_GROUP_URL –Ω–∞ –ø—É–±–ª–∏—á–Ω—É—é –≥—Ä—É–ø–ø—É
   - –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –ø–∞—Ä—Å–∏—Ç—å –ø–æ—Å—Ç—ã

–ü—Ä–∏–º–µ—Ä—ã (—Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏):
- –ü—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞: https://t.me/chillmusicapp
- Bot API: TELEGRAM_BOT_TOKEN=7959964084:AAGJe1UcGDpy6LYBoPr6o_3agy6x8yrmpLE
- Chat ID: TELEGRAM_CHAT_ID=2839297134
*/

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram –≥—Ä—É–ø–ø—ã
async function parseTelegramGroup(groupUrl) {
  try {
    // –ü–∞—Ä—Å–∏–Ω–≥ –ø—É–±–ª–∏—á–Ω—ã—Ö Telegram –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    // –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø
    
    if (!groupUrl.includes('t.me/')) {
      console.log('Invalid Telegram group URL:', groupUrl);
      return null;
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –≥—Ä—É–ø–ø—ã –∏–∑ URL
    const groupName = groupUrl.split('t.me/')[1];
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      const response = await axios.get(`https://t.me/s/${groupName}`, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
      });
      
      // –ü–∞—Ä—Å–∏–º HTML –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
      const $ = cheerio.load(response.data);
      const posts = [];
      
      $('.tgme_widget_message').each((index, element) => {
        const $el = $(element);
        const text = $el.find('.tgme_widget_message_text').text().trim();
        const author = $el.find('.tgme_widget_message_author_name').text().trim() || 'Unknown';
        const date = $el.find('.tgme_widget_message_date').attr('datetime');
        const image = $el.find('.tgme_widget_message_photo img').attr('src');
        
        if (text) {
          posts.push({
            id: Date.now() + index, // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
            text: text,
            authorName: 'ChillMusic',
            authorAvatar: 'images/icon.png',
            date: date || new Date().toISOString(),
            image: image || null,
            likes: 0
          });
        }
      });
      
      if (posts.length > 0) {
        console.log('Successfully parsed Telegram group posts:', posts.length);
        return posts.slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
      }
    } catch (webError) {
      console.log('Web parsing failed, trying alternative method:', webError.message);
    }
    
    console.log('Telegram group parsing not available for:', groupUrl);
    return null;
  } catch (error) {
    console.error('Error parsing Telegram group:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ Telegram Bot API
async function getTelegramPostsViaBot(botToken, chatId) {
  try {
    console.log('Attempting to fetch posts via Telegram Bot API...');
    console.log('Bot Token:', botToken.substring(0, 10) + '...');
    console.log('Chat ID:', chatId);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
    const response = await axios.get(`https://api.telegram.org/bot${botToken}/getUpdates`, {
      params: {
        limit: 20,
        timeout: 30
      }
    });
    
    if (response.data.ok && response.data.result.length > 0) {
      const posts = response.data.result
        .filter(update => update.message && update.message.text && update.message.chat.id.toString() === chatId.toString())
        .map(update => ({
          id: update.message.message_id,
          text: update.message.text,
          authorName: 'ChillMusic',
          authorAvatar: 'images/icon.png', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          date: new Date(update.message.date * 1000).toISOString(),
          image: update.message.photo ? `https://api.telegram.org/file/bot${botToken}/${update.message.photo[update.message.photo.length - 1].file_id}` : null,
          likes: 0 // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        }));
      
      console.log('Successfully fetched Telegram posts via Bot API:', posts.length);
      return posts;
    }
    
    console.log('No new messages from Telegram Bot API');
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é
    try {
      console.log('Trying to get chat history directly...');
      const historyResponse = await axios.get(`https://api.telegram.org/bot${botToken}/getChatHistory`, {
        params: {
          chat_id: chatId,
          limit: 10
        }
      });
      
      if (historyResponse.data.ok && historyResponse.data.result.messages) {
        const historyPosts = historyResponse.data.result.messages
          .filter(message => message.text)
          .map(message => ({
            id: message.id,
            text: message.text,
            authorName: 'ChillMusic',
            authorAvatar: 'images/icon.png',
            date: new Date(message.date * 1000).toISOString(),
            image: message.photo ? `https://api.telegram.org/file/bot${botToken}/${message.photo[message.photo.length - 1].file_id}` : null,
            likes: 0
          }));
        
        if (historyPosts.length > 0) {
          console.log('Successfully fetched Telegram chat history:', historyPosts.length);
          return historyPosts;
        }
      }
    } catch (historyError) {
      console.log('Chat history method failed:', historyError.message);
    }
    
    return null;
  } catch (error) {
    console.error('Error fetching posts via Telegram Bot:', error);
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
ipcMain.handle('get-posts', async () => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ—Ä–∞—Ö
    const [posts] = await connection.execute(`
      SELECT 
        p.id,
        p.text,
        p.image_url,
        p.created_at,
        u.display_name as authorName,
        u.avatar as authorAvatar
      FROM posts p
      JOIN Users u ON p.author_id = u.id
      ORDER BY p.created_at DESC
      LIMIT 50
    `);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const formattedPosts = posts.map(post => ({
      id: post.id,
      text: post.text,
      authorName: post.authorName || 'ChillMusic',
      authorAvatar: post.authorAvatar ? `data:image/png;base64,${post.authorAvatar.toString('base64')}` : 'images/icon.png',
      date: post.created_at.toISOString(),
      image: post.image_url,
      likes: 0 // –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ
    }));
    
    console.log('Successfully fetched posts from database:', formattedPosts.length);
    return formattedPosts;
  } catch (error) {
    console.error('Error fetching posts from database:', error);
    throw error;
  } finally {
    if (connection) connection.release();
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
ipcMain.handle('create-post', async (event, { text, imageUrl }) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const token = loadSession();
    if (!token) throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    
    const [userRows] = await connection.execute(
      'SELECT id, is_admin FROM Users WHERE auth_token = ?',
      [token]
    );
    
    if (userRows.length === 0) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    const user = userRows[0];
    
    if (!user.is_admin) throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤');
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
    const [result] = await connection.execute(
      'INSERT INTO posts (author_id, text, image_url) VALUES (?, ?, ?)',
      [user.id, text, imageUrl]
    );
    
    console.log('Post created successfully:', result.insertId);
    return { success: true, postId: result.insertId };
  } catch (error) {
    console.error('Error creating post:', error);
    throw error;
  } finally {
    if (connection) connection.release();
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
ipcMain.handle('is-admin', async () => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    const token = loadSession();
    if (!token) {
      console.log('No session token found');
      return false;
    }
    
    const [userRows] = await connection.execute(
      'SELECT is_admin FROM Users WHERE auth_token = ?',
      [token]
    );
    
    if (userRows.length === 0) {
      console.log('No user found with this token');
      return false;
    }
    
    const isAdmin = userRows[0].is_admin === 1;
    console.log('Admin check result:', isAdmin, 'for user with token:', token.substring(0, 10) + '...');
    return isAdmin;
  } catch (error) {
    console.error('Error checking admin status:', error);
    return false;
  } finally {
    if (connection) connection.release();
  }
});

// –õ–∞–π–∫ –ø–æ—Å—Ç–∞
ipcMain.handle('like-post', async (event, postId) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const token = loadSession();
    if (!token) throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    
    const [userRows] = await connection.execute(
      'SELECT id FROM Users WHERE auth_token = ?',
      [token]
    );
    
    if (userRows.length === 0) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    const userId = userRows[0].id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ª–∞–π–∫
    const [existingLike] = await connection.execute(
      'SELECT id FROM post_likes WHERE user_id = ? AND post_id = ?',
      [userId, postId]
    );
    
    if (existingLike.length === 0) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
      await connection.execute(
        'INSERT INTO post_likes (user_id, post_id, created_at) VALUES (?, ?, NOW())',
        [userId, postId]
      );
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
    const [likeCount] = await connection.execute(
      'SELECT COUNT(*) as count FROM post_likes WHERE post_id = ?',
      [postId]
    );
    
    console.log('Post liked:', postId, 'Total likes:', likeCount[0].count);
    return { success: true, likes: likeCount[0].count };
  } catch (error) {
    console.error('Error liking post:', error);
    throw error;
  } finally {
    if (connection) connection.release();
  }
});

// –£–±—Ä–∞—Ç—å –ª–∞–π–∫ —Å –ø–æ—Å—Ç–∞
ipcMain.handle('unlike-post', async (event, postId) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const token = loadSession();
    if (!token) throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    
    const [userRows] = await connection.execute(
      'SELECT id FROM Users WHERE auth_token = ?',
      [token]
    );
    
    if (userRows.length === 0) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    const userId = userRows[0].id;
    
    // –£–¥–∞–ª—è–µ–º –ª–∞–π–∫
    await connection.execute(
      'DELETE FROM post_likes WHERE user_id = ? AND post_id = ?',
      [userId, postId]
    );
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
    const [likeCount] = await connection.execute(
      'SELECT COUNT(*) as count FROM post_likes WHERE post_id = ?',
      [postId]
    );
    
    console.log('Post unliked:', postId, 'Total likes:', likeCount[0].count);
    return { success: true, likes: likeCount[0].count };
  } catch (error) {
    console.error('Error unliking post:', error);
    throw error;
  } finally {
    if (connection) connection.release();
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞
ipcMain.handle('get-post-likes', async (event, postId) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    const [likeCount] = await connection.execute(
      'SELECT COUNT(*) as count FROM post_likes WHERE post_id = ?',
      [postId]
    );
    
    return likeCount[0].count;
  } catch (error) {
    console.error('Error getting post likes:', error);
    return 0;
  } finally {
    if (connection) connection.release();
  }
});

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ª–∞–π–∫–Ω—É–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç
ipcMain.handle('is-post-liked', async (event, postId) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    const token = loadSession();
    if (!token) return false;
    
    const [userRows] = await connection.execute(
      'SELECT id FROM Users WHERE auth_token = ?',
      [token]
    );
    
    if (userRows.length === 0) return false;
    const userId = userRows[0].id;
    
    const [likeRows] = await connection.execute(
      'SELECT id FROM post_likes WHERE user_id = ? AND post_id = ?',
      [userId, postId]
    );
    
    return likeRows.length > 0;
  } catch (error) {
    console.error('Error checking if post is liked:', error);
    return false;
  } finally {
    if (connection) connection.release();
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
ipcMain.handle('configure-telegram', async (event, { groupUrl, botToken, chatId }) => {
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram (–º–æ–∂–Ω–æ –≤ —Ñ–∞–π–ª –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
    const telegramConfig = {
      groupUrl: groupUrl || 'https://t.me/your_group',
      botToken: botToken || null,
      chatId: chatId || null,
      lastUpdated: new Date().toISOString()
    };
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('Telegram configuration updated:', telegramConfig);
    
    return { success: true, config: telegramConfig };
  } catch (error) {
    console.error('Error configuring Telegram:', error);
    throw error;
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram
ipcMain.handle('get-telegram-config', async () => {
  try {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    return {
      groupUrl: process.env.TELEGRAM_GROUP_URL || 'https://t.me/chillmusicapp',
      botToken: process.env.TELEGRAM_BOT_TOKEN || '7959964084:AAGJe1UcGDpy6LYBoPr6o_3agy6x8yrmpLE',
      chatId: process.env.TELEGRAM_CHAT_ID || '2839297134'
    };
  } catch (error) {
    console.error('Error getting Telegram config:', error);
    throw error;
  }
});

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
ipcMain.handle('test-database-connection', async () => {
  try {
    console.log('=== –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î (–∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞) ===');
    await testDatabase();
    return { success: true, message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ' };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î:', error);
    return { 
      success: false, 
      message: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${error.message}`,
      details: {
        code: error.code,
        sqlState: error.sqlState,
        stack: error.stack
      }
    };
  }
});

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ä–µ–ª–∏–∑–æ–≤
ipcMain.handle('clear-releases-cache', async () => {
  try {
    clearReleasesCache();
    return { success: true, message: '–ö—ç—à —Ä–µ–ª–∏–∑–æ–≤ –æ—á–∏—â–µ–Ω' };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error);
    return { success: false, message: `–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: ${error.message}` };
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞
ipcMain.handle('get-cache-status', async () => {
  try {
    return getCacheStatus();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞:', error);
    return { error: error.message };
  }
});

app.whenReady().then(async () => {
  try {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    console.log('=== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===');
    clearReleasesCache();
    console.log('–ö—ç—à —Ä–µ–ª–∏–∑–æ–≤ –æ—á–∏—â–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ');
    
    await testDatabase();
    await initializeTables();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º SMTP, –Ω–æ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    try {
      await testSMTP();
    } catch (smtpError) {
      console.warn('‚ö†Ô∏è SMTP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É');
      console.warn('–ü–∏—Å—å–º–∞ —Å –∫–æ–¥–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è');
    }
    
    createWindow();
  } catch (err) {
    console.error('=== –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ===');
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', err);
    app.quit();
  }
});

app.on('window-all-closed', () => {
  pool.end();
  app.quit();
});
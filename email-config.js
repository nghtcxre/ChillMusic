/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMTP –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Gmail, Mail.ru, Yandex –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
 */

const nodemailer = require('nodemailer');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—á—Ç–æ–≤—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
const SMTP_CONFIGS = {
  // Gmail –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  gmail: {
    host: 'smtp.gmail.com',
    port: 587,
    secure: false, // true –¥–ª—è 465, false –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ—Ä—Ç–æ–≤
    auth: {
      user: process.env.GMAIL_USER || 'your-email@gmail.com',
      pass: process.env.GMAIL_APP_PASSWORD || 'your-app-password'
    },
    tls: {
      rejectUnauthorized: false
    }
  },

  // Mail.ru –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  mailru: {
    host: 'smtp.mail.ru',
    port: 587,
    secure: false,
    auth: {
      user: process.env.MAILRU_USER || 'your-email@mail.ru',
      pass: process.env.MAILRU_PASSWORD || 'your-password'
    },
    tls: {
      rejectUnauthorized: false
    }
  },

  // Yandex –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  yandex: {
    host: 'smtp.yandex.ru',
    port: 587,
    secure: false,
    auth: {
      user: process.env.YANDEX_USER || 'your-email@yandex.ru',
      pass: process.env.YANDEX_PASSWORD || 'your-password'
    },
    tls: {
      rejectUnauthorized: false
    }
  },

  // Outlook/Hotmail –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  outlook: {
    host: 'smtp-mail.outlook.com',
    port: 587,
    secure: false,
    auth: {
      user: process.env.OUTLOOK_USER || 'your-email@outlook.com',
      pass: process.env.OUTLOOK_PASSWORD || 'your-password'
    },
    tls: {
      rejectUnauthorized: false
    }
  },

  // Reg.ru SMTP —Å–µ—Ä–≤–µ—Ä (—Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ChillMusic)
  custom: {
    host: process.env.SMTP_HOST || 'server82.hosting.reg.ru',
    port: parseInt(process.env.SMTP_PORT) || 587,
    secure: false, // Reg.ru –∏—Å–ø–æ–ª—å–∑—É–µ—Ç STARTTLS –Ω–∞ –ø–æ—Ä—Ç—É 587
    auth: {
      user: process.env.SMTP_USER || 'admin_chill@chill-music.ru',
      pass: process.env.SMTP_PASSWORD || 'bY7pQ2fC4vcV7gS3'
    },
    tls: {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TLS; Nodemailer —Å–∞–º –ø—Ä–∏–º–µ–Ω–∏—Ç STARTTLS
      minVersion: 'TLSv1.2',
      rejectUnauthorized: true
    },
    connectionTimeout: 30000, // 30 —Å–µ–∫—É–Ω–¥
    greetingTimeout: 30000,   // 30 —Å–µ–∫—É–Ω–¥
    socketTimeout: 30000,     // 30 —Å–µ–∫—É–Ω–¥
    debug: false,
    logger: false
  }
};

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
function getActiveConfig() {
  const provider = process.env.EMAIL_PROVIDER || 'custom';
  const config = SMTP_CONFIGS[provider];
  
  if (!config) {
    throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä email: ${provider}`);
  }
  
  return config;
}

// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä
function createTransporter() {
  const config = getActiveConfig();
  return nodemailer.createTransport(config);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SMTP
async function testSMTPConnection() {
  const transporter = createTransporter();
  
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('SMTP connection timeout after 30 seconds')), 30000);
    });
    
    const verifyPromise = transporter.verify();
    await Promise.race([verifyPromise, timeoutPromise]);
    
    console.log('‚úÖ SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
    return { success: true, transporter };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    return { success: false, error: error.message };
  }
}

// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function getConfigInfo() {
  const config = getActiveConfig();
  const provider = process.env.EMAIL_PROVIDER || 'custom';
  
  return {
    provider,
    host: config.host,
    port: config.port,
    secure: config.secure,
    user: config.auth.user
  };
}

module.exports = {
  SMTP_CONFIGS,
  getActiveConfig,
  createTransporter,
  testSMTPConnection,
  getConfigInfo
};

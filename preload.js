const { contextBridge, ipcRenderer } = require('electron');


contextBridge.exposeInMainWorld('electronAPI', {
  getReleases: () => ipcRenderer.invoke('get-releases'),
  getAllReleases: () => ipcRenderer.invoke('get-all-releases'),
  registerUser: (userData) => ipcRenderer.invoke('register-user', userData),
  saveToken: (token) => ipcRenderer.invoke('save-token', token),
  getPagedReleases: (page, pageSize) => ipcRenderer.invoke('get-paged-releases', { page, pageSize }),
  updateUserAvatar: (data) => ipcRenderer.invoke('update-user-avatar', data),
  updateUserBanner: (data) => ipcRenderer.invoke('update-user-banner', data),
  updateUserName: (data) => ipcRenderer.invoke('update-user-name', data),
  updateUserAbout: (data) => ipcRenderer.invoke('update-user-about', data),
  checkUserExists: (data) => ipcRenderer.invoke('check-user-exists', data),
  getAverageColor: (imageBuffer) => ipcRenderer.invoke('get-average-color', imageBuffer),
  getArtistDetails: (artistId) => ipcRenderer.invoke('get-artist-details', artistId),
  getArtistReleases: (artistId) => ipcRenderer.invoke('get-artist-releases', artistId),
  getReleaseDetails: (releaseId) => ipcRenderer.invoke('get-release-details', releaseId),
  fetchLyrics: (data) => ipcRenderer.invoke('fetch-lyrics', data),
  checkAuth: () => ipcRenderer.invoke('check-auth'),
  loginUser: (credentials) => ipcRenderer.invoke('login-user', credentials),
  searchReleases: (query) => ipcRenderer.invoke('searchReleases', query),
  submitRating: (data) => ipcRenderer.invoke('submitRating', data),
  submitUserRating: (data) => ipcRenderer.invoke('submit-user-rating', data),
  getReleaseUserRatings: (releaseId) => ipcRenderer.invoke('get-release-user-ratings', releaseId),
  getUserRatedReleases: (userId) => ipcRenderer.invoke('get-user-rated-releases', userId),
  logoutUser: () => ipcRenderer.invoke('logout-user'),
  sendConfirmationCode: (email) => ipcRenderer.invoke('send-confirmation-code', email),
  verifyConfirmationCode: (data) => ipcRenderer.invoke('verify-confirmation-code', data),
  getRatingReleasesForMonth: (month, year) => ipcRenderer.invoke('get-rating-releases', { month, year }),
  searchArtists: (query) => ipcRenderer.invoke('searchArtists', query),
  createArtist: (name) => ipcRenderer.invoke('createArtist', name),
  // Favorites API
  addToFavorites: (userId, releaseId) => ipcRenderer.invoke('add-to-favorites', { userId, releaseId }),
  removeFromFavorites: (userId, releaseId) => ipcRenderer.invoke('remove-from-favorites', { userId, releaseId }),
  isFavorite: (userId, releaseId) => ipcRenderer.invoke('is-favorite', { userId, releaseId }),
  getUserFavorites: (userId) => ipcRenderer.invoke('get-user-favorites', userId),
  togglePinRelease: (userId, releaseId) => ipcRenderer.invoke('toggle-pin-release', { userId, releaseId }),
  toggleFavoritePin: (userId, releaseId) => ipcRenderer.invoke('toggle-favorite-pin', { userId, releaseId }),
  // Artist Favorites API
  addArtistToFavorites: (userId, artistId) => ipcRenderer.invoke('add-artist-to-favorites', { userId, artistId }),
  removeArtistFromFavorites: (userId, artistId) => ipcRenderer.invoke('remove-artist-from-favorites', { userId, artistId }),
  isArtistFavorite: (userId, artistId) => ipcRenderer.invoke('is-artist-favorite', { userId, artistId }),
  getUserArtistFavorites: (userId) => ipcRenderer.invoke('get-user-artist-favorites', userId),
  toggleArtistFavoritePin: (userId, artistId) => ipcRenderer.invoke('toggle-artist-favorite-pin', { userId, artistId }),
  cacheArtistAvatar: (userId, artistId, avatarData) => ipcRenderer.invoke('cache-artist-avatar', { userId, artistId, avatarData }),
  getCachedArtistAvatar: (userId, artistId) => ipcRenderer.invoke('get-cached-artist-avatar', { userId, artistId }),
  createRelease: (releaseData) => ipcRenderer.invoke('createRelease', releaseData)
});